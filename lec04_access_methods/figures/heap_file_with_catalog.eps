%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 991.000000 163.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.6 (Build 19G2021) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 991 163
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 991 163
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /h put
dup 34 /e put
dup 35 /a put
dup 36 /d put
dup 37 /r put
dup 38 /c put
dup 39 /o put
dup 40 /space put
dup 41 /one put
dup 42 /two put
dup 43 /three put
dup 44 /four put
dup 45 /five put
dup 46 /C put
dup 47 /A put
dup 48 /T put
dup 49 /L put
dup 50 /O put
dup 51 /G put
dup 52 /ellipsis put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






2B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 22 dict dup begin
/.notdef 0 def
/space 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
/A 7 def
/C 8 def
/G 9 def
/L 10 def
/O 11 def
/T 12 def
/a 13 def
/c 14 def
/d 15 def
/e 16 def
/h 17 def
/o 18 def
/r 19 def
/ellipsis 20 def
/uni20BE 21 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E0B8C08955DB50295DA0B1284D8D5B935DAA6F05584E2B8991A37722BF39D2C3FD5D959E56A8F552FE92EC544577FBFD6D926C3BB0F717A47EA7CE6F09DD15D4D13310F4CC197A1B1B505930BF657CD84860FFCD5266C8A8200B37F157075DC0F1061814C5FF3AB9601E87CB76EC09EE103E1A5DBE6DAF0270F69CC70E61FE09D9DB94BD116E2D28331E6A3AD0144A7EBF05A97277B055DBCEDBAA275137A41E1FC86ADCB95B173DB8280049B7FDA1F1A87879596424F1A4677A8D2CE209A9472A8E3DF130EDAB97C47FFFB623181A118492E0CC98AB54DDE89B96408C78110FA3792E0202675F402A13C3945EB8FA737A6A4880C8A553E5849D4E5BB634F949936705B3061EB0FCAC2CA621EECE5DF6DC43F8F07894CB5D81D6D4944F7A5B34E740E72A1B3A0737E138957C977F3CE10C3B0ECD22B7D55A754D6C4C91718C56A2B60E1B9703431A48AA9CC1BF128DDDE01D710E04679D149486D8075E8A4FD575CBBC6E5EE392E90F1CC3F367F94ACF12D2012668084092BC258EBDC8CFB71C9F625C2D6782F93FEB5BF45D76723A0E87EA71DC74D6F52D304380CCD40E696F52533F50A3E587EB1794C30AE5B6135963660C849E05F718859D45F336B044F3D7E82D030E217F03CD9775B19D80F0163975D7069C37E17935D847F2EBF167228B7453F4CC289D87004E943792ECD83241712761F19311EBB4EA902F21675E508BF85726227875A800CE5535681076CBC0EE41F9D3024195E588198DB15ABED7268C4B
7E6FE0D15D6D3D952E021FA3A253639E126007E0373D9CC4FBA71B9FA860B5D2CE674482CBD53C284601BB62486D36783F2E459C084BD58AD2FD1F4E2BA6611CD9FAE2BAD575B18504D36AC1D656B58462F2B034714A9BAD09AFE27D61BFA8A5FF7DAAD0F7F1ACAB6A7C3672FE3A42606CFB1021A473A8F7D0ED3FD962EDBA361501F6A85AD5F4D62C4C998B0E0E02202F79896B6FC78B5311484D472017A1CD895D7671E737287E55BC732058BCA18C58C2201B2AFD733CB051E345872C2659307042D9880EA2AD0A93E6CFAC8F05A444BA1518CB838A82058C66C64B495B7D68779DB497B2F24485134FCF7BB5F253A816FCAE1E78B03923B7D22F4CEA6D4DC96E32738FD8738BBEB4DE0CDD2028D1449AD05745F3816D48EC5CA87F02515E0251255259FE3FE4CA6163B2BE490C41B809E12B7F3BE5C2C30788923F69BF80091939620EE6C09AA55F2F894350CAC02DC805A5536F39A334CA958A9FAF66A9A827F3713CC93AAAD1EFA5C913CAB73DFEA92875DEF8BF27C37A729984D3D23BFF81E8255DA1F9CD2558808740BDD0CAD50C43200237842C98955DF63EBA307086537275ACEFEE10741CDFC75D3CD4DFFFA73128462A2B27DF4494BAB0CE8124161A4D35B2F6CEB4341A7011E28E25AB2BF94943552C1FB4C87D7F059F43BF092F84FFF6B261F89324BDF610ABD89F2A711B438D16E62B2F5139471098093BE6DF2F9DCFEEFE8AF245B2B36D8B20615B0B503BB64894E5049FD2F03135C91B0B73ED353FB3CF99E3DE5ACD388FA0D4A1E69F8D5A098449B502D10567D82BAB7328C6119CB1B3287ED09925EB05083C0AD963CC5090E247BD60628EDA5253D601734A6A8A824ED3C9FB2BB266AA299FAE9A6BD57382668B94D780665F15BC666E17DDC39F9B4FF0282CBF01C7286DCB3BEDE13AB5E1AE52C5C5DFDFBAA469741B2FE057DCA84EBD576FCDEA2A31C3679FE8BCBA227AF339ABD9B2726CA2E5D71A8858557F950A9291ECE7E460F07F92AFD963F99E14E42210E68A7C6F3F41BF068A4F74EF21D2807586A2650E13571A1D8A701E7CCE2EA2F4F8AF928DA3909EAD0EA7D483CB711E3CA7FB84EBBB67F69E5989CE3DB0767ADBA54DE165BF0B8DBA6073524D6C34D6533E4485F249BC76677E5C441B4FB47EE00AF6FF41AC0D6381FD3EF5AD4814483F4C8CD62C4778BAB8D80273A295883F8A9B35598D1FB8DC634AFA61C1A39ABBB2440DD99DCA8AADA34182873F0DEA0FB77C2FA42EBD6B6BA0B18B2DECB75E0BADC31C734E32F85212BF407BFC5B9D2A6D0CC3BA22CE32076516DB059D4AA955D92B6E4400A4C3D850604D259FD07DCD95B94D80ED738529E6C15EB6AA77C92A5EC6C91D6B578F4A923D59EBE8845B51B429B86029191FEF9D2D923C64240AC40A10404756EF533DE1920C23F68E66DD91CB0F7F72A2B0CE76
5CCFA00C1416FD1781F2D3B651B03ED0B741EA9EE5C3AEF41E35D968E57AC5A28A465737391C786761218B0DB33420A0FCD6914116FD4F4EAAD75D20797C9E6EA2FD199D4DDF04886437CF32D205D656E5460E834A73308AA9040729B7CFEA4300B7DEAFB8F20DB8DD21B2BEA6D6578C1A1B2E6B5B92B8024114DBA9E577D6D752AF20CCCA604BD8CA397832AE9D11D4048E92265AFCC244D0F99DB6956CF0686A4B5AD072C3C1A1D884AF6247FF5F7025F9A52C6635BB24C31E7454CD95B9BE6C14D66EC795E8159AD098B0E1189F52C394AB914848380F53D0AD52114C7FDEECE4054E27C068ADCFBC89BA3AAB2CC7D6AA317093500875C13C753320A496BFE54DD81A2765F0A75CBFE1CF0F389A052C7ACB2D13D126366631715F796605EE6C4F23FDA09EE931A6DA6F20F24D495437A3D7D757D0BCEA05B0425BBCA954E8CFBF6571AF72BF7F881DD46C60E158B8BDF45F908CEBEAE6923C724769B98DDA0E95A5EFA4FF227A1463C3B7505BFAF61F343745AB7BDA759EE34E07115C15F2F616EE34D125AD2A1DE3C055C7929F91F8C2658278DC5F6FBDAC53F0BF74A176A6AB06A9E54D32BC6AD1681D21AFCE801371D51840B3314257F34DC23BD67B75FD742431997B0F89ECCE1081C8FE07F7939566274A55F8238063C954B382E85DD9FBCF8F02C1A84672106A9D2C4D6448EBA073865E399D5352F1335211C383F975D1E1865F96B4144F3E9B96DFEF74404A4385FEBBC985611370027E37C19B853FC9BC9A76D78AAF196405D0CCB068E82D31D2FCFFA3AD4694BD09C782BD0BBA2DF43BA62C5113D3EFCD7793D9AA6ABEAFDFE5EF93B67E09242C294D770B2B189F498EFFF2400D350861ADD1F5796C2AC9B32AA90A09A2B9E95B0EB53A82856740A90373292470844322BFF4BAC2D8BC7ECF431FFE1A45F314C8910DD31F23CBF6257A233D6FB6B20BEDF01478B5A8CBAAA03DA1DF61E51BA90F5ED23CFE40B9E5653EDFF73F6CFE4503CEED8FE9B082848C51F98EF8F5BF185DB4CDF80E693231C7D56891649D7F38ACF7E40156BA9F263CB61B3602D13744933E5D1A35261C5FD67D5D722E0D5254D78FAD8EDD27D82E53DA88C2D479D0583D9FF9ADE150B09A099D5A302FD8F03660BCCB9FA406A45BCD416672C6C0ED833F56636B5198A33391B3AAF6D155E5584BFF1B422810942CCEA9302671EFED53746A2D193223029DD5E89B6A395A0A4BB8BE242EDCF6DB3F0E6244DFA0924C40692B7414CA62ADAC57BF1844C0B7620AA57EB955B93875BA812FF537365A47EAA71AAEF860F0894084243BAC63FD5DD8C494135838C0AB02E10BA8D249CF07CAF3DDB447F71833BDAD8B088CEFC0B70AB2AF51EAB77077AFE5D784EBA1281AABD10AF9B840FC3F71BF64120BC179010B168070B1783C8A819472098124C066C8BBC628D9303871
8DE903E77123E6EA0A6D1DB78D54D0812E8DA698C037CF41AAA3437D28F3A20BA131D35D66A0EB5309A8A5EE640BB08918D682D4DA2A3C5B28488C74F008CAA4B3417559C13AFD4DACA0FE50CB99FCCA20DCECBC9A9A87108E044354529E4BB044425364A2DBCDFD618DD002C790FD4A5CBED00DA60246A1571899AA9B1A04EA8152D45B23503A3578367CD634ECD57E036C41C3CA67E305AC50BF65A1D27C075D4F6D5EAEE755898028F821ECF0C485F6920974131BDF54FD2B623DD1C208F9EE8B5AEE3881BB2FE1D569884B48F3D118275DA64EB767A57B4140723965EF37FCC802EBDC703A38D905C5785C0DE2E30B6A8C5980278C3DF7E9E499907A48976A7F3F0FF63CF49B90C3DDAB69A2E0F431FA0A6D7FF87ACB6334A13AEBFCDB42C915C2BC5B7DCA65536BCFD4916C0EA8D8BDBC3A24489CE0AD4CB04A70A4EEAAC34F145DA838EB7E3B32AE12CB40974953EBA0DFFCC4A594131BF909435FACAFF8CB68A3A350D98D0B2C2B9C647459F5FE8AD5FB9E345C2AE66447B5128AE0B415DE6421F1BED1C163AB758DC7A855980B5E2F41ED9C62D56CDC168CD24F27D9408DA31DB51ACCE404E42E97778A18A714DC596B8A86348010B1B31DC6E3EB79CAAF11FA0BE85AA5B42AF680A568B808C64357BE593219CB75BF1FAFD236AC888950CF257730170D1EA6535EF6AF1E59A761ADA9C9C87CD8C03FD0B66F5302446A817477F7A7417A7202E8B66C6B9AE127DA6C1F526576AF741AFA62C4F726712C7E205BE813118315B88A4467EE2731040B7CB7AEE367B68695E61B98AE8267800E27E3E9DF2B359889EE096457C66829474D42C2CD18E34FE028C96E51F5173651DDC36F5E11DEE06B4E252EF493A53C541014950968725826DA3D0DF5B85C09321ACA3186CB0A2F5CE3AB82CE3C9D022971F207B3C65C635E58680A6ABA338D846DFAA685169924B730238C6845564893F1143B84F4EACF08D863F536AF0644318959AFEBDB63F59119166E83F1C4AFEC2105EF4600CFA1DFFB993482C395B4FCC6C31F34BEA078F7B67E840264DC96235A3C3979B51A0080DD8B51C45EAFF3E4B64A4041325D68E1C4ED593A58C1FAAAB9C53D0CB837F1CB460CFA0FAEE303C532802F63C0D8159A73C393CEFBB71CA51F52447076E4BC226509616A5A0F25BE2EDFBA030493A3C6A57FD76BAC47976788A3D494D9F4BD8E3100BEADDA8A2A80673C11D04CD010100918F66DA3A1EB36E19640AA9AE31785035B489CDD2271F98BBC9E58F1BE82280A00FBDE46769BD5B54E080EF12B4C43FB343D9C23E3001951C88AC35D89D73A816533D5C57C8A3C6A45F9D08D4537478BDE9339139FDD739F747B01BCBBD18D1820F59DB81FD81F20C13BC105A6533FB9AC3941DCF937AE91B9670BC3A2A1449DCB3DF8F853C8DAA55434F97ED6B90E7BDE08E109D9
3BA035865829B5DA75C80CFF11BFB26D0C656E44692C05C9A59E174BB54825EA0D0B4C50499A20C31360FEB86F78BA675D29913EFB142EC168C1AEC24BF7AAA01F6E48CE4B009395BB5DA26BCF0097F541C96C367C05365288516A1257AD85B022489BEB5C75827455DC4C22EA786F33F47BFB477C91B173CBC7169FA678F2D68146A3E49B59D335F5313ACADC006BC4147DEDB2B659EDA201B9EBA87508FB6FC1CA71B2BA9514C03EE4984911946E1FD0B8796CFD8AB7CE21626805E32F3D119636E75B0B072A484CE15EE0A54AD42535C3C9EA22086E7994878FCC087F16C6E25D4AF28FB49CB7C029397B165C0131040C45F21D5F2349BD02A26AC4AC771501650503CD285D469C7AA08D5F89713BAE6EB846904EC814ED036E011051DCC61849DC7726CEE7739C65AC17DBBDDADCD179F91127159809E066C0A0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 991 163 rc
1 0 0 -1 0 271 cm
126 162 m
342 162 l
342 270 l
126 270 l
h
126 162 m
S
0 i
1 0.75 1 sc
CM
126 109 m
216 109 l
216 91 l
126 91 l
h
126 109 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
126 162 m
216 162 l
216 180 l
126 180 l
h
126 162 m
S
/Cs2 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
152.442 174.832 m
(!"#$"%)[ 6.672000 6.444000 6.444000 7.116000 6.444000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
396 162 m
612 162 l
612 270 l
396 270 l
h
396 162 m
S
0 i
1 0.75 1 sc
CM
396 109 m
486 109 l
486 91 l
396 91 l
h
396 109 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
396 162 m
486 162 l
486 180 l
396 180 l
h
396 162 m
S
/Cs2 SC
0 sc
0 i
422.44199 174.832 m
(!"#$"%)[ 6.672000 6.444000 6.444000 7.116000 6.444000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
216 109 m
342 109 l
342 91 l
216 91 l
h
216 109 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
216 162 m
342 162 l
342 180 l
216 180 l
h
216 162 m
S
/Cs2 SC
0 sc
0 i
256.76999 174.832 m
(%"&'%$\(\)\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
126 91 m
252 91 l
252 73 l
126 73 l
h
126 91 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
126 180 m
252 180 l
252 198 l
126 198 l
h
126 180 m
S
/Cs2 SC
0 sc
0 i
166.77 192.832 m
(%"&'%$\(*\(\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 3.336000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
252 91 m
342 91 l
342 73 l
252 73 l
h
252 91 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
252 180 m
342 180 l
342 198 l
252 198 l
h
252 180 m
S
/Cs2 SC
0 sc
0 i
274.76999 192.832 m
(%"&'%$\(+\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
126 73 m
306 73 l
306 55 l
126 55 l
h
126 73 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
126 198 m
306 198 l
306 216 l
126 216 l
h
126 198 m
S
/Cs2 SC
0 sc
0 i
193.77 210.832 m
(%"&'%$\(,\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
234 55 m
324 55 l
324 37 l
234 37 l
h
234 55 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
234 216 m
324 216 l
324 234 l
234 234 l
h
234 216 m
S
/Cs2 SC
0 sc
0 i
256.76999 228.832 m
(%"&'%$\(-\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
486 109 m
576 109 l
576 91 l
486 91 l
h
486 109 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
486 162 m
576 162 l
576 180 l
486 180 l
h
486 162 m
S
/Cs2 SC
0 sc
0 i
508.76999 174.832 m
(%"&'%$\(\)\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
396 91 m
612 91 l
612 73 l
396 73 l
h
396 91 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
396 180 m
612 180 l
612 198 l
396 198 l
h
396 180 m
S
/Cs2 SC
0 sc
0 i
481.76999 192.832 m
(%"&'%$\(*)[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
414 55 m
540 55 l
540 37 l
414 37 l
h
414 55 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
414 216 m
540 216 l
540 234 l
414 234 l
h
414 216 m
S
/Cs2 SC
0 sc
0 i
454.76999 228.832 m
(%"&'%$\(+\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 0.000000 ] xS
/Cs1 SC
0.75 1 1 sc
CM
0 163 m
81.727997 163 l
81.727997 134.552 l
0 134.552 l
h
0 163 m
f
/Cs2 SC
0 sc
1 0 0 -1 0 271 cm
/F1.1[ 16 0 0 -16 0 0]sf
4.9999986 128 m
(./0/123)[ 11.552000 8.896000 7.712000 10.368000 8.896000 12.160000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0 0 0 sc
57.935863 136.448 m
75.69268 150.30452 94.035286 161.8936 111.87297 171.54675 c
S
0 i
CM
121.82555 94.304321 m
113.80782 103.18102 l
109.94805 95.720314 l
h
121.82555 94.304321 m
f
0 J
0 j
1 0 0 -1 0 271 cm
121.82555 176.69568 m
113.80782 167.81897 l
109.94805 175.27969 l
h
121.82555 176.69568 m
S
1 w
1 J
1 j
0.60000002 i
774 162 m
990 162 l
990 270 l
774 270 l
h
774 162 m
S
0 i
1 0.75 1 sc
CM
774 109 m
864 109 l
864 91 l
774 91 l
h
774 109 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
774 162 m
864 162 l
864 180 l
774 180 l
h
774 162 m
S
/Cs2 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
800.44202 174.832 m
(!"#$"%)[ 6.672000 6.444000 6.444000 7.116000 6.444000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
864 109 m
954 109 l
954 91 l
864 91 l
h
864 109 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
864 162 m
954 162 l
954 180 l
864 180 l
h
864 162 m
S
/Cs2 SC
0 sc
0 i
886.77002 174.832 m
(%"&'%$\(\)\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
774 91 m
990 91 l
990 73 l
774 73 l
h
774 91 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
774 180 m
990 180 l
990 198 l
774 198 l
h
774 180 m
S
/Cs2 SC
0 sc
0 i
859.77002 192.832 m
(%"&'%$\(*)[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 0.000000 ] xS
/Cs1 SC
0.9410941 0.94122839 0.90185368 sc
CM
774 55 m
900 55 l
900 37 l
774 37 l
h
774 55 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 271 cm
774 216 m
900 216 l
900 234 l
774 234 l
h
774 216 m
S
/Cs2 SC
0 sc
0 i
814.77002 228.832 m
(%"&'%$\(+\()[ 3.780000 6.444000 6.444000 6.888000 3.780000 7.116000 3.336000 6.672000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0 0 0 sc
194.12114 162 m
200.88313 159.60965 274.21088 134.32739 324 144 c
376.23657 154.14807 357.60205 180.29173 378 198 c
379.30649 199.13422 380.51947 200.15804 381.64554 201.08095 c
S
0 i
CM
391.75653 65.104469 m
383.4501 73.711624 l
379.83875 66.127548 l
h
391.75653 65.104469 m
f
0 J
0 j
1 0 0 -1 0 271 cm
391.75653 205.89554 m
383.4501 197.28838 l
379.83875 204.87245 l
h
391.75653 205.89554 m
S
/Cs2 SC
0 sc
/F1.1[ 16 0 0 -16 0 0]sf
689 218 m
(4)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
720 216 m
758.09998 216 l
S
0 i
CM
769.29999 55 m
758.09998 59.200001 l
758.09998 50.799999 l
h
769.29999 55 m
f
0 J
0 j
1 0 0 -1 0 271 cm
769.29999 216 m
758.09998 211.8 l
758.09998 220.2 l
h
769.29999 216 m
S
1 J
1 j
0.60000002 i
463.5303 162.37497 m
463.5303 162.37497 541.67651 134.04721 593.91309 144.19528 c
646.14966 154.34335 627.51514 180.48701 647.91309 198.19528 c
649.04456 199.17754 650.10583 200.077 651.10132 200.89983 c
S
0 i
CM
661.5368 66.012787 m
652.64001 74.008194 l
649.57648 66.186752 l
h
661.5368 66.012787 m
f
0 J
0 j
1 0 0 -1 0 271 cm
661.5368 204.98721 m
652.64001 196.99181 l
649.57648 204.81325 l
h
661.5368 204.98721 m
S
ep
end
%%Trailer
%%EOF
