%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 956.000000 307.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.7 (Build 19H2) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 956 307
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 956 307
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Menlo-Regular
%!FontType1-1.0: Menlo-Regular 1.0000.2.0280
14 dict begin
/FontName /Menlo-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /quoteleft put
dup 34 /A put
dup 35 /n put
dup 36 /a put
dup 37 /quoteright put
dup 38 /comma put
dup 39 /space put
dup 40 /one put
dup 41 /four put
dup 42 /D put
dup 43 /e put
dup 44 /l put
dup 45 /two put
dup 46 /three put
dup 47 /H put
dup 48 /I put
dup 49 /v put
dup 50 /y put
dup 51 /E put
dup 52 /five put
dup 53 /K put
dup 54 /B put
dup 55 /o put
dup 56 /b put
dup 57 /six put
dup 58 /seven put
dup 59 /G put
dup 60 /i put
dup 61 /L put
dup 62 /quotesingle put
dup 63 /C put
dup 64 /u put
dup 65 /eight put
dup 66 /F put
dup 67 /J put
dup 68 /M put
dup 69 /W put
dup 70 /T put
dup 71 /R put
dup 72 /m put
dup 73 /r put
dup 74 /parenleft put
dup 75 /c put
dup 76 /s put
dup 77 /parenright put
dup 78 /S put
dup 79 /h put
dup 80 /d put
dup 81 /t put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1143 1 index div -767 2 index div 1470 3 index div 2133 5 -1 roll div]cvx def
/sfnts [<






012322061514163332363704254A9D52FEFCFEDB01250104519A4E49935DADBABBAC609841392B2B01380114011401382A2CC1413AE0D0CFE13B3E000002007BFFE3041206140010001C0030401A0500141A8C0E148C08990EBE019B0317040006024711120B481D10F4ECFCEC323231002FECE4F4EC10EE113939300111331123350E01232202111012333216011416333236353426232206035AB8B82E9964CBE9EACA659AFE0F8885858B8B85858803D10243F9EC8D5357013B01150111013757FE0BD6DADCD4D5DBDA000002007BFFE30460047B0015001C0033B800082BBA00020010000B2BB8000210B8001CD0B8001C2F00BA0006000D000B2BBA00130019000B2BBA001C0002000B2B303101152115061633323637150E01232000111000333212072E01232206070460FCE308BFAE58C06D69C35BFEFBFEDA0120F0D6F7B00C918885AC08028C5A06E5C83839B72B2B01390113010C0140FEDE9774A9B06E00000100C30000041B06140013002C4018090E03000301068C11BE0C9B0A010206004A0D09060B461410F4EC32FCEC31002F3CECF4EC11173939300111231134262322061511231133113E01333216041BB96A71818BB8B831A873ABA902B6FD4A02B6978EB7ABFD870614FDA46063E100000200EE00000480060F0009000D004BB800082BBA00010000000B2BB8000110B80007DCB8000AD0B8000110B8000BD0B8000210B8000CD000BA00030004000B2BBA000B000C000B2BBA00010008000B2BB8000310B80006D030310121112115213521112101331523013C01D7016DFC6E016DFEE1011FB8B8045CFC338F8F033E0242E8000100F00000045A061A000D0027B800082BBA000D000C000B2BB8000D10B80009DC00BA00040005000B2BBA000D000A000B2B30310114163B0115232226351121352102CF5B59D7E9A5B5FED901DF01957C7E9BD3C203F5900000000001006D0000046F047B002200A3402718120F090407001D1B0607150C8C2003BE1BC219100700110F084D064E114D0F4E1C184D1A452310F44BB00C544BB011545B58B9001AFFC03859FC3CFCECFCEC11123931002F3C3CE4F43CEC321139113939111739304047300430053006300730083009300A300B3F163F173F183F193F1A3F1B3F1C3F1D3F1E8003800480058006800780088009800A800B8F168F178F188F198F1A8F1B8F1C8F1D8F1E23015D013E013332161901231134262322061511231134262322061511231133153E0133321602A422694A876FA83546503BA8394A4939A7A721633F4C6503EE4845D1FEDFFD770281ED737BE5FD7F0281F0707BE5FD7F0460603C3F4600000100C30000041B047B0013002C4018090E03000301068C11BE0CC20A010206004A0D09060B461410F4EC32FCEC31002F3CE4F4EC1117393930011123113426



1EFE031DFE031C1B19051CFE031B0010051B19031AFE0319FE0318FE031716420517460316152D0516420315141005152D03141003130010051314031211420512FE0311012D05114203100F0F0510110310B802004009040F0E0C050F0F030FB801C04009040E0D0A050E0C030EB801804009040D0C09050D0A030DB80140B4040C09030CB801004037040BFE030A0916050AFE0309160308100307FE0306012D0506FE0305140303023A0503FA0302012D05023A0301001005012D0300100301B80164858D012B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B002B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B1D00
00>] def
/CharStrings 51 dict dup begin
/.notdef 0 def
/space 1 def
/quotesingle 2 def
/parenleft 3 def
/parenright 4 def
/comma 5 def
/one 6 def
/two 7 def
/three 8 def
/four 9 def
/five 10 def
/six 11 def
/seven 12 def
/eight 13 def
/A 14 def
/B 15 def
/C 16 def
/D 17 def
/E 18 def
/F 19 def
/G 20 def
/H 21 def
/I 22 def
/J 23 def
/K 24 def
/L 25 def
/M 26 def
/R 27 def
/S 28 def
/T 29 def
/W 30 def
/a 31 def
/b 32 def
/c 33 def
/d 34 def
/e 35 def
/h 36 def
/i 37 def
/l 38 def
/m 39 def
/n 40 def
/o 41 def
/r 42 def
/s 43 def
/t 44 def
/u 45 def
/v 46 def
/y 47 def
/quoteleft 48 def
/quoteright 49 def
/Eng.alt 50 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1143 -767 1470 2133} readonly def
/UniqueID 4038846 def
currentdict end
currentfile eexec

74DB44F1FB340C9AEDB531F105D7146D37E97EC25E4CF0BFFF3949CB33F4BB8B53B4FBF1445AF305BC39D016889A01942E499B8475431BB4630EC02855430E0AAB87E798827184C35E6934B068AC24326FD0EE48136DCB6E98A425D07188A5B077DAD761D98C27DD2E2B81AB6ACD4F11107FBB116297F17F051F5C4DE85F1EA632A8F6551E9DCD7FF9F4DA9EA812A68B7D50E91FC3A5C544DC25750AEF1330DF6486BDAE5514EF1CC1CCCC3AC4289795E127F291A9B49FEF15354879250273607CA6F8F7551B997DB395DC010BFE77A6C39360F2360C6EA2FDDF3443B85A3E1AC35C1C1383A83C7555DB1540BD5CA79949528444779F20F19ACD2A1FA15CF9A569E560AE1077DE843A14ECC9C25F3CBDB8B931413A94F43408334320C3676FD4F945BF0B9665B38E4F36E7E3B234347E51BEFBF0D0DAB64C1FBE00868AB66D59FE9CE3DA87B13837014AE62A52E51876DCEB65A3EF05338BBDB85F6ABCF0DC00FD5DA12E97DD1DAC28B276411F638E583E5FEE191D3AB70EC99ADCCBD2C174E0FEFA4015A4AD52F006BFAFF819B544A174ADBAEDE9E65AC266C5CD126C5FF1C5AEA0FC898B64AC094E7A371B418EAF00D19173A5B8C33456FCBA8F6B848EB40C5DB6E41AE00E0E4E1EA31D830CE98E132BB3AAF00DC5C4E6B0B62BDB0F39C2930E0718B700958E99F92E8FF171BE0438E417D461A1AE6D43B4951DC948A53258A0CE8B6DBB34A351339FF06FC9AA42DDCAE72E006509ABBE0CA03E03D5E8E26C94F76144FDC3D2DE9F9779D8118628F08F5761D7957472C7ADDE9D32C949A5C7A149B4809DA1CE77F90B09DF8E7C60FFE6861F8DBEB5DBED2FB007053B661DE224316CA8074C79183212B7F0CD283F1F1264E3F478F238202B8A121905EAFE042636FE0748070516B79F913B820CD3AD1AB0E406B7B19AAB39C05CCCC9D55201395940D66EAD77F28AD8376C77F480BC9D92D77F8D1DD7147B92B416F021953E7B898AE44D5FA9C1AB4899C9192FC61D4AF3A7BEBFE6E0D3F73B85D9E38F840DBC0AA7056111D3A373B31826DF5A953AC26BE84A56BD617236D69B23F9A0FE0D4BA658626F3CC9DC81120BC66217419593825FF351E9C6451F90B025E4321C9DAFACB69A0C8524E2864F4243783351E7160ACC6D6AEBB93323A618ECD8E0B200740198253C7B031CF0F95674DBAA0E26D9EE23A52FDEDB2CC862336C34DEF217075EEF04FE5A97C9D8A96BB4555DC2A1D2F93962B6493DDA3EA55FAE894D55BF1170CDA8F94D5FA6E02088F533936A0D6688CB59F6EE5082B31A75E1F2CF768FB763D00AF1705B6BC712D1CCB6BACCA803D552600BAE16B4D7C72DA19771A6F611CC64038FB6477833B836FE93140D2BBE2CF9F859CF7313C8EAAE26F9655F98C1621991A7DF45AD636B4A3B4B65C88713E5E6762184FC91EC091806508BE771

DA205DBCCB2E792733D3790EA209FCCAF7E195772B976FD9F3C8739D6A1801D5734758080CA70B04CE701596AE0452F4CBFC79DFCE57CD85405E2DF0077DC8516B44E6CF7CCBE29D78242E5771FE557A6F0CFC3FA9BCAE31C635EDE269F28B8719833DA2639AFE2ED0F3D3CFE3BBF5360875F7883BA0B1958F8EB78D4A6C8D7C506E2E7D5BDCECC6D9517FC52F48EB7748A7C68192A5E0313A470F682D4502C0BFB33CB53A7710B91C69F0BC3B17C822C016E7559D8E4074DE4A66D1B200643CBA930A8833398A0A88AA00EAC9E349B1B6B471C3D273CFFF29C71D0EEF3E1C23A94BAADD467E7365FC54694CCB793AA30E54C1E879CBC72227D6DC61A43CD256AFA2B0B8F6F20A54B32CEE73DAEDA3519E878970046A73265CDF43D97995D89901ABBAAFDA660543391EEF0343D1331F8A3AA7A7EC31E0B4E5FAEC727025FA096709FC056DBC27D87B9A58ED7EB6349E0C0AF2403FB472308AF53EF4105FBD60DC7686D41442990722583FB850897BD1125471CF5A41816EA5F08EA380CD776E8157655795F24682ADD5A912FAD7732D82575093D2BAF45719CF3BC1EBC11DB757F72A2609BC688147F5537B1A6FDEA2E93500F9DB56BFD3322FECBE4EF017997402C6F2ACE72FFF6278E0FE8308BD462DD2AAF40A4A7341678E1D05DB650048096B5DE69B9E99E5830EB3BA7BAE21AEC52B39AD18ACD5D2BBF0EA4C0ECEE4B8DB8838437FEECD03F5D13FFD629141C4A5FE9DF52771A40D4AB200CEA385CB695DAD5AA748334B196086E4157132A5934E092B96EBF14E69EED22E7125FFD037AD84710F06E3C63765D07A985DF2A033E37473FC573EC05183ECAA41AB4E79CDD85EFA6C4EF147AE51E761420F86A55DC91DAC5B4D664F40618B87A35F0FE913394BE9BC7E0CFE4CC7073F45B9E3651C234ABEC2B2CA63A3ABB98A5D2B622AFFE8560F9B77A25BC4FD73D233BED0C68ED2B47C96B7B92972BBB2AEEDC42C971E80D03CB62AA5F375CB0813F8BB8EDAF2AADA4F3B1046FC375827DDBB0B2741ACD6631FD451F89DF94F6417F985F90A3B36A9ECCB676CAB3776DBEBD086E850F3FF145693C208C78A8ED13C3766FADDE703EDD69B6549DE90037642D3667CC62342739D1EB4FBE294D1CC3FD4805206802B80D9AF6A7ECDEB9490A73CF995F9CFB9D635C9C91044AF75F69A68BA751542226BE18377F66E52B776A8DB836664453A6738A73FDD042801984E27EB3CF0BDD6DDF133A57EBB0F1BAE4CDA71A027386BA243F7BD7EC1DFED996FBA7F55C5E29C62BD506558F34727EE4C7CD7F6C780F38BBC4292F47F34A38F51490333E7D58E06C14A141C7477E02A43FDD4CFC32D0C491C1A1DFC57A562FE36AC02F3FAD491E46D2376E8AE95DB01A363D0727B704A873B41F7EB1E58C69BE482DE9C819046A2DA1BDA61699DCCF16F16C69F1B57

543CA071ACAB6027D9F4C573CC3D32A3267D00AB11BD52FC41FC603633A11F700D523EF338B9B7464312DFB23B7C0A06B2D81C945B7010340FA8E7C7BD5220A8BC2ED717B869533C06199DA19F74164233E52027C1FA836B4FC161B26E0B12E95FAC6DE7096C30B76D333456288ED82D6D8E9BBD95C519EBCA4F8B0733C3A4FA6FDD1AF11B6E5ED3DD537E0AFACA686D456B1B1C8558517060FC6F37ADD361AA5099AA7362D8BD786DC29E77DDECE70CE5364E1272EBBF2C3CBB6719244FF176F0304B9BE3C02662C26EB9C087F6B1A319794C644919D8DD63526CD79AEF4BB9498D6C487DCF99324D1BFF979A9B82CDCA5ACBC4F8D779AE46315423745E958ED8C13F51D44CFA77DD506CBC6EA957843F70E740F3272862A94A0215D0A0B66ECE3ACBC7AEB223878F9CA5B4354F39F173CB1E6BD1E74238AED6781C38B4A43C8D6407AA2493C234220EC8FC3E898A08D6B096EFBA6B2B295BCF2D66F0FDC46F611201DD524E32ACB14D1C528BD0988BB04144C93AB6022EC5E08CD7D43CB079F9E3FB50016F8F68E76CBE34C1558B403CA877A04DA5EC0A141550BFDAAEA7B7110523574C573CEC074F0FA7038FBF8F88D059ED41546C2DE3302AD65E9BAA01B79093EB4CB5FEEA9561EBC3B10152735547AF26B7159EA8252C03F0C3E1811E499C6BE0B80D138FCB062C1D9369DB188499097B7B1B4326CE1369C6BBBE53BC8D4DB467DDC929D64B4AFF2517B91F360C50B9A53623B9F6C7DF9EBE2BB78120D4ABCB56627DE59925E455CEFAE94E8560BC163DBF4BC9E14778863CD15DA84A839CEDB85496C45C32B11C3A17422EF0B6A2E0EB5F0879BFC96205D6654C56D6B60E44A1A83FB95DE8452C06DB090C0615EE884E098BA077CBC20927399A123676F25F0C0BCF93F4AB4F12F0DB4C1FC53D9EFD7A9E423B6CCFC5BE3C6561C3A979FBEF7EAFB8FC899D299F6F760553F2D790D5CF883E8B25FC8EB5774C812FD1C739DCCF94B06847921B4AFC59838A014EA2289B5E9CB0ACE01B0DBCD6DEE3614979BB493C76CDAEF60D739724065F9B22A9D917344AB3BCC300F677FABC0FF970A89B0F874561E1B44B29A880C6E03A9920367065494E286D3AFC8D2FFA4D2AFEA60BCD274F62FA27962BD0E2E2CD0F6F1A3E078272A3FC2B1B75017F6489D42E54382ADAFD749B953E8343E5FF5393A5526474434A6D050FA096A9F98F32FB614C48FFA31011AD0C92ADEBF4EBA8F77BEDC9936E2CE0205721341F5CC1956B06B1A4B23B5966E04A5C6FF895E83B14A6F1466F300C18BA9DF55528FB5AC798F5C8C36C57028BE30209B407E96CCA99B95D935A9FEC353EBD070D6D8C9D4B5BCDF417B784E801E9AC5C46291749B73BD84C530E2A46FFE97A16B64081EB57DE4213305FE0C8B628F04FE1D6C286914C05180D1F45D6704A3EE9B1EA7CB5F4B4
A99C6D0BD117E91741D5435BCB76FB7BD8D090B1363F496925BFF4F8A84014825628719BB78DBE1E49627EB0DD2F74A9CE391B9E9FEEAD5A6B155D2EC3BDA0FC38C68E336F246AFC692ED15D2FA3F51E007EE535DB1B69F8E09BFC56063BD52AA1B3FF281DF5CCE727799250A1CD5FBB9295D6DC79604830600CB241E646D65202A7202C952BF402AB8264EE8F947FFF5012EE77E6A144F13A82D3F073E72C8B9C1E574F29196A239DF304F8F0F1F48651D61A63CF7FE6D4B83DE3D5B07D688DCD16B0EDCEBBC18021668B3D536C75139FDAB354AAA8A5C76B6761F657BF46ABF2826A9FDF18930ED82C3FB855047CA5D9DB9EFC904973F8E9A312BAAD0119256BD391136A6E653E2F893BEDD81E1F8B95406AF53EE0E27E3F7109FEB4BB445C445F4F343E7FD0389C399D64985E626E702A2F906A532C28D6E1252C09A2CA3DFB561D49B9BB300AE15AB7D93AFEE25D9B4325AE292ABB94071087AD3EE74F665F55743FECEDFB21CAB187376CAFA5B19F0790552A211CE3788DF36BF59AFF33C9F7A93B678B82733F3BA873EC775952A0A6F82DC509B92DE28A2F949912E8473269C675071C0ADC9C44A269E386B57FF71669FD2AB6B1956D57D6D4131A934AFCC4FF23D3C2A98D25677F1D151128CCC9B6FC02F763EABD3771EB59171F1606B14D6809D5E2340508C8B99A0243FA1CBDEFDA2B09468B849670DE66E6A88D5D2CA67CEC5B11BF1A5C2E2D857C3FA5FFF2E8312D42031300468DD7CF94FB68AE29F1B75F0D627017F67BB1C4CE55A2AAECFADF47539B9F9F7C8F4978FE70409AD56FE8A866196A41B153DE2F4CF1FAA311D94270258AF179458A3ED4DC87320B4777C4F6DB0847877305B48DEF4B13BE0C7CFBAC72F57FA6D6993B51EA404E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Menlo-Regular cguidfix
/F1.1/Menlo-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 956 307 rc
1 0 0 -1 -143 397 cm
144 144 m
288 144 l
288 216 l
144 216 l
h
144 144 m
S
/Cs2 SC
0 sc
0 i
/F1.1[ 21 0 0 -21 0 0]sf
152.78467 175 m
(!"#$%&'\(\(\))[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
152.78467 199 m
(!*+,%&'\(-.)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
306 144 m
450 144 l
450 216 l
306 216 l
h
306 144 m
S
/Cs2 SC
0 sc
0 i
314.78467 175 m
(!/$,%&'\(-.)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
314.78467 199 m
(!012%&'\(-.)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
468 144 m
612 144 l
612 216 l
468 216 l
h
468 144 m
S
/Cs2 SC
0 sc
0 i
476.78467 175 m
(!3,$%&'--4)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
476.78467 199 m
(!5$2%&'--4)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
954 144 m
1098 144 l
1098 216 l
954 216 l
h
954 144 m
S
/Cs2 SC
0 sc
0 i
962.78467 175 m
(!678%&'49:)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
962.78467 199 m
(!;<,%&'49:)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
630 144 m
774 144 l
774 216 l
630 216 l
h
630 144 m
S
/Cs2 SC
0 sc
0 i
638.78467 175 m
(!=+7%&'--4)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
638.78467 199 m
(>?@<>&'.:A)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
792 144 m
936 144 l
936 216 l
792 216 l
h
792 144 m
S
/Cs2 SC
0 sc
0 i
800.78467 175 m
(!B+<%&'.:A)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
800.78467 199 m
(!C7+%&'.:A)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
144 324 m
288 324 l
288 396 l
144 396 l
h
144 324 m
S
/Cs2 SC
0 sc
0 i
152.78467 355 m
(\(\(\)&'%D'A%)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
152.78467 379 m
(\(\(\)&'%E'A%)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
306 324 m
450 324 l
450 396 l
306 396 l
h
306 324 m
S
/Cs2 SC
0 sc
0 i
314.78467 355 m
(\(-.&'%F':%)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
314.78467 379 m
(.:A&'!D'9%)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
468 324 m
612 324 l
612 396 l
468 396 l
h
468 324 m
S
/Cs2 SC
0 sc
0 i
476.78467 355 m
(.:A&'%B'9%)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
476.78467 379 m
(\):\)&'!E'9%)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
630 324 m
774 324 l
774 396 l
630 396 l
h
630 324 m
S
/Cs2 SC
0 sc
0 i
638.78467 355 m
(49:&'%G':%)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
149 114 m
(D+H8+I'J#$H+&'K,$LLM)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
149 295 m
(NKO+P@,+'JK,$LL&'Q<H+M)[ 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 12.643066 0.000000 ] xS
ep
end
%%Trailer
%%EOF
