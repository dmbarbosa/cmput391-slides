%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 751.000000 343.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.7 (Build 19H524) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 751 343
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 751 343
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /M put
dup 34 /hyphen put
dup 35 /one put
dup 36 /space put
dup 37 /i put
dup 38 /n put
dup 39 /p put
dup 40 /u put
dup 41 /t put
dup 42 /s put
dup 43 /m put
dup 44 /e put
dup 45 /r put
dup 46 /g put
dup 47 /ellipsis put
dup 48 /l put
dup 49 /o put
dup 50 /d put
dup 51 /fi put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/one 3 def
/M 4 def
/d 5 def
/e 6 def
/g 7 def
/i 8 def
/l 9 def
/m 10 def
/n 11 def
/o 12 def
/p 13 def
/r 14 def
/s 15 def
/t 16 def
/u 17 def
/ellipsis 18 def
/fi 19 def
/uni20BE 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E3232AAAE39DD432AA1E5356738508FDA4147F2F61700BB68D9A15C4FEE98E02037088961D9429914384DDD24358DF578016E5CCE5FBB335D9483E0DC2BC4B85BD6E5B2917C00109AF4F6408722A2A5984F452F561FBBD4166D2C55E448B3E21DDAD5A177F9D23BA996BA8E2B2E05B20BD4D5E4FAA727FE2B927DFC059EEA922CA030059135275EB2B7709E5FD7425C6F222DA5DF158772A43CB6369B018167E4F06F4DF438CE3E5D847F5FB251056176CC64BC6462B8334D0D61024B0D90CD672BC4271A6525B49A75D6BB455B5385DCA903C1C5D979E9EF085636BFFBE835F8CF208D7030A8EF31EAB0C87265C4EB5424EFF3091BA432E3185106296E3C79C05D4727968DBAC3725634FF2820F6E956EA98FEB27195424A8BF19E05A1A39F4CB632A5C43C90D81C9C26659196666D184323500DAEFF920B480461D813D56631551543059259845EF8919FC97510063647328C0F18A87738C1A6345F7322436032B9861B5B28D4D85BAD245F37A219664A4F91225FD79D6005E0D7D56AECF29F7DCEB2A67B733297877EFAB1F0F92D2C200E17628442FD92A6594C1813CAE9806EB47D062F76D824BBF03D2E696AA04A2E492572E867A142B12A63D0DB1E958DC5727D080A0FC123664C95DC3A9036A122996ADC59327769D22033C768EEF96D18F7D17346A191522972DB75CAD888BF19EC906518729A1A456E35C056E8E47B297DE1B44A4EB94439CF9F405BB3CFA5A475F02D9FEDEAB08DB662A5CB49A44399EDD
F6F74E9D749CBBA3E1D24E468612BD56FBF229A9E4763B0734AE3BBB677E6D71381CB25B9EDBB28D33A8EDB669136397E03D185AA4181F14AF8F2D0FE31F92DA327050353D8224455938C8BCFE444CB92A78A9D8FF4B128C98DC5E7EA235AB9CE3DFE3771D8D0B850F955C18C7B37CEE0C5B19CC3C0E611314D32E9E81088D36E571707419F937184025E18F014F4D4594FD794AA56438F5D3A23171227799375C474421005A9C23D189F3410D521DC5EA8AFCD5143B1AAE5D2E7831DB90DD4F81A6682498E228E705429FA9743FD2C8613FC3A642AD4E55FE03557C26A5CB5CFE24EDE4CC3F09A1BCF182CB77A5DD567B4D5A6A69D0E4362248406757B590D22F16DE313A981F1DF5CC2D54A5E16EF0795F2DB44760A2C9895770B909F5E8EB04E7E0EF6FB385A4597F58E19137DFBC2158E6EFED60FF3456B4DF0C7F3E8908D0A20106D41D929A47E8DA0C0EEAF7FEAD4945351427EA3F30A2E6B12ACDAC2E35D50FD633085BCEBB5E91930804837C9D50E146BE8C2A6170BA588E8106294DBD38FC224EC81D08E5DB98BFF93847081A5A7C740273D2426A17FAE370D9DDE1FBF3E7F0A773E1518CCAE60877FFE549621B11939686F39A57B185105E0067A546EAC96E55422BB8E7F48A821394F8DA193443A5DE81423295CE464530E6B47BE7FD4CFBD9F4D147B152E23171DE43F4EF98547352F53606F0AE7F8F72A962750FD1C088B637EF82A8E68FA27368AEDD6BB0EF2CAE9CF97A7707F842574A2B8B5DA62A30C0617697C51C51D098D5A30708A1433D5CA15E5D9C4B96C7CF4E8398A1E432A78452E2927F0F780E89D181A1E27D391A35D19DEE282ABF2BC2034458DDE2A0C85850E3D3D80C6EC2B672CE3AE53A88A108AF3EF3CFDD5BEE43A648F94878F8AF0359464695FEBD9EA83F537A2C2C250EDF463DD00E5E073E12CA2AA5E94615100699469E66C0098347140DAAD05EA89AB0539EA38F73A93EE852CB7C8639D739CE72058DDD9D244A1A369DF60AE6179B543BCFA8C82FB9FC7E02386248B8DBD9DBBF32A458FA69F2268C91B1089D2E8713619C25B2F885EAADFC45E29084D7A89155CC5BFD0214DF707CFFE4FE20AC7589273DCB7554B435B48C0ED9DA301FB686AE157D134F215EAD8F7CFAEC372A5B353A89313A67824E7F92829F54185CF58D1A386606D2F4C24DEEFA14A8ADCFD7984F5939BCC9F9C96D873521AFA0E36ED59F3ECDD7170211333CC3599E7DBF6A47CF4B3F4680A0535C457AF0A8C5A9DB13CA5053BC792C192C43BC8B97F68C255E297E6CBB192B099431C3B90676B944D6C5BC92087804BE67D612EE0D4118392D52D40AFA53EA02BD2B571B8AA0AFFBADDA92038324D3FCA82851A104307A3F8165652D36D3341E37B893805C7E08014F31937F7D0ED075A6D45FE716B5DE3CD58BB1563BD7C1E3C28F7E60
8768976B24AE3121D7E4DEFBA93A7FCD9F162911FAB46E2DF06546D86839C715535E79DD74FD0A4ED5183008A58FC68E207514FB077BFB95A40FE7C119AEC36A7A410AF4ED9F2221B9D7F0B4231F26BCB870B7B4375FEA12DAA235B1A587F06EF16F9A1AAD74344367E125293175008CA9BA4D086C6FC4A603E725A596F418E7E8ADD67FA086D1B815193796A067D065F291C5C9D06375AD4F4F4484E4CFB4267C124716524F689CA646FA77DAFC0D18F5D2C205CF0089612B915E02E7246D552688BAC2C9E47E83A6F05C88F0A26F6DEFB46C29BF72B3E2650C7026C06CEA7569AC9BFC4A684466F2F7C1B47EC70C7CDA51CE20D76172B5FB2540082981C426EB16CB541BCF5016F49AFCF56EF63537B8C15C14C4C08E4E255BFA7CA1FCB6CA34869B92A5309289FDE5E534F7E032EB3CA6EECA50BF0AE3D2E1A469513DAF0D2AC068DDCE82604BF72F1B07B4E29433A2F695AA7062825CFAC28EF8C14A35B171672B24687FB9AB071F9A881EAA164D27FE928DF861C6B50AD82A4FF195675BD9E4FB8FF2403669E2149D9E2C19F3AB228E20886AF93688107F539F5FC3B87C2A2177F8EAECB2692A869B5EC9954DE6301934BDC5355E97990717E339C921621FEFD92F18DD6D1A58D25881F8CFFC4580D449D5CB2BBE261D6F417140C372AFCF06C0ABD339F57E706865F65852B47BCB17AA5DDF4809178297C541CE78F6D6DFAE56DC8F63FACD11FE485B57995457EC3A7A32DC06987EA592E2AAFAAE8015242C1F6C2739FB127F54838A0D33BCD307161E3D7434052841955650E649249B5092097A0CFD4912DFA3988A48F524A8FE0F85BEE618D55E6A3CC1C9B2A57E714D0B7E50D095A94D5CCE40D2772B2A6E6E2B564D4AFBEA199FA6FC83FD816207CBBB4B3003FCDC15F66E27B97BA09529884827245C05701061E10FDC6A394CBA4C4A440461E48B29921BF1D71686C6940F33A6923CEF39C3DEB5FCC8BFCC9E9F212230B4105D7C17BF875C0F15252637D0790BD84FA8A596F1DC1B45651362EEFBF4F1BBD8502A9BAE45BB2444FB6F61E60255F4D44CB681C05C76356BE2212B3356C1C8715166711C17527609DCFF74B4E552CB27BE4B48FDBC682B6DE43ED6020437CA7ABAD7244904AC9810D3534C59D5AB30915B19F1AFEDC7C81C440BFC7D717BD30111CF4A1E2D11F3BC35D4080BF816FC840DB54D63F0D03D2A0FC0B8564B4A831040C1CEEA3DADA0C1469781E4939FB365A0205B12023EC85ABA865DC0EF99B5D124259CC7B5DB7E22CC3D62FFA8F184B0D4AFDE1079B53F5CC2B01C252CE74B80DCAC6E2C7D9510141B58FEFC36079C62F9DF250F62F3B87C8A801D738012D97BCC78596BFC827E5F2F2A126ECBA3B6151125297233010FA55BCAE1BD5E948DE71342356EBC90A2AD509AD9110D43661679CF1B65E267E8CDA6F296
99B568DCB5817D072CEE3081D1D3A36598CF133AD999E54CF3662791FFA22401DA61E59C077A64309DE27D2838A51E6E7726E27733D9C152D5F6CB082C718515FA3E65973FE39976886F1D453F2A6674B555F9C3E563CEAC1DDC3F23F91D209B3088D8B832A825C6A9B879779B9CC961E87941EBB4FCE3FA30C50F776598F8F454B0A754A5CF6379994F861BD960685417DA889116162EF4C5C9C8445691E1B0FBB02282DDB818115B4696A67ECA5A431CB886CF8AD4C208DF5E436F41020BC6C2AF8E93C5CB075C33C8E8481DF65B42F647225F6DFD6C958D8810F16CE1E08337BEF923CB802C139C308EEDB31D8CEA71A18BF96D058E31D0788D7CAA3492D0B9E8E2B2BD2712F375C5DF77F383318B80CF533AD9131C00F17DED0E90566E1D32F52804C6DADBB06B5A4718F7DAE4FC2956F1BFD0F37FCBFF8FBD2315B4D749CEC48A877E4D2C9C368B2CC26EF6196C6BA10C71DCC59779AEEB52EE14B7399E52B60CD08B3EC4E8F974D3ECC6A2F6E35198BD81024C73B3DA7F0A93569E30F687B54D0D5C29C7D118D7D26661A1AC86A1A3684055FC8E0DE93A75A3BEE055E45926A1302D89E932D1917CA02B2B4602900B2D845D88A25645A27BF0049CECC88FA1AEC32432A1AF643F64F39B8E3D831EE14A25A750764F513A3A1B9EBB425E88BC67D794563327123ADDA4CB5C863AAFCC779C1C50E0A417B80EC8D2BCCED180F71B7BC55408BC68076B2B2276A706AEF70A11D7D7629A7EDFCD1AE75C2B4A48C4B8C13BD5FE581C7BB58881DD5CE07C5F8283F53A89595E4B11A1D27EBD8CFA623CFF8E0FAA9838AC31BEE2AE477FB14CBA2E6DF047731697D949727729E54D9FD83B7E6255854B220845EFD4AF670C79DFDD8B5EAB5A377022890ED92CC8EBE504D1FE2613A34EF9FB53
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: HelveticaNeue-Italic
%!FontType1-1.0: HelveticaNeue-Italic 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue-Italic def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /M put
dup 34 /hyphen put
dup 35 /one put
dup 36 /N put
dup 37 /space put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -993 1 index div -481 2 index div 1511 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<


00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/one 3 def
/M 4 def
/N 5 def
/u20BC 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-993 -481 1511 1077} readonly def
/UniqueID 4025256 def
currentdict end
currentfile eexec

C15D6986FB4C5045C5C6A34F22AD3306B45BBB7D070803B4F6FF2039AA17F4C4E3FB269AF347B9D393BFA722D800388D8BC53FBC5EDABCAD392269154DBB80108819A4B0ECF3DEFC343C58685E42082D994C786ED869FD59E16B7D935BD1EBA144CC586E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Italic cguidfix
/F2.1/HelveticaNeue-Italic renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 751 343 rc
287.35574 263.83597 m
324.35284 235 l
362.62399 264.82898 l
340.93729 273.37567 308.18539 273.04468 287.35574 263.83597 c
h
287.35574 263.83597 m
f
1 J
1 j
[
2
2
] 0 d
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 -2444 1567 cm
2731.3557 1303.1641 m
2768.3528 1332 l
2806.624 1302.171 l
2784.9373 1293.6244 2752.1853 1293.9553 2731.3557 1303.1641 c
h
2731.3557 1303.1641 m
S
1 0.49327001 0.47400001 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
2733.624 1283 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
1 1 1 sc
CM
413.66772 263.83597 m
450.66486 235 l
488.936 264.82898 l
467.24927 273.37567 434.49738 273.04468 413.66772 263.83597 c
h
413.66772 263.83597 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 -2444 1567 cm
2857.6677 1303.1641 m
2894.6648 1332 l
2932.936 1302.171 l
2911.2493 1293.6244 2878.4973 1293.9553 2857.6677 1303.1641 c
h
2857.6677 1303.1641 m
S
1 0.49327001 0.47400001 sc
0 i
2859.936 1283 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
1 1 1 sc
CM
539.97974 263.83597 m
576.97687 235 l
615.24799 264.82898 l
593.56128 273.37567 560.80939 273.04468 539.97974 263.83597 c
h
539.97974 263.83597 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 -2444 1567 cm
2983.9797 1303.1641 m
3020.9768 1332 l
3059.248 1302.171 l
3037.5613 1293.6244 3004.8093 1293.9553 2983.9797 1303.1641 c
h
2983.9797 1303.1641 m
S
1 0.49327001 0.47400001 sc
0 i
2986.248 1283 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
1 1 1 sc
CM
666.29175 263.83597 m
703.28882 235 l
741.56 264.82898 l
719.87329 273.37567 687.1214 273.04468 666.29175 263.83597 c
h
666.29175 263.83597 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 -2444 1567 cm
3110.2917 1303.1641 m
3147.2888 1332 l
3185.5601 1302.171 l
3163.8733 1293.6244 3131.1213 1293.9553 3110.2917 1303.1641 c
h
3110.2917 1303.1641 m
S
1 0.49327001 0.47400001 sc
0 i
3112.5601 1283 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
1 1 1 sc
CM
53.043732 263.83597 m
90.04084 235 l
128.312 264.82898 l
106.62527 273.37567 73.873383 273.04468 53.043732 263.83597 c
h
53.043732 263.83597 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 -2444 1567 cm
2497.0437 1303.1641 m
2534.0408 1332 l
2572.312 1302.171 l
2550.6252 1293.6244 2517.8733 1293.9553 2497.0437 1303.1641 c
h
2497.0437 1303.1641 m
S
1 0.49327001 0.47400001 sc
0 i
2499.312 1283 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
1 1 1 sc
CM
180.73174 263.83597 m
217.72884 235 l
256 264.82898 l
234.31328 273.37567 201.56139 273.04468 180.73174 263.83597 c
h
180.73174 263.83597 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 -2444 1567 cm
2624.7317 1303.1641 m
2661.7288 1332 l
2700 1302.171 l
2678.3132 1293.6244 2645.5613 1293.9553 2624.7317 1303.1641 c
h
2624.7317 1303.1641 m
S
0 i
1 1 1 sc
CM
461.45581 67.727905 m
475.51474 60.698475 475.51474 49.301525 461.45581 42.272091 c
447.39694 35.242622 424.60306 35.242622 410.54419 42.272091 c
396.48526 49.301525 396.48526 60.698475 410.54419 67.727905 c
424.60306 74.757378 447.39694 74.757378 461.45581 67.727905 c
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
2905.4558 1499.2721 m
2919.5146 1506.3015 2919.5146 1517.6985 2905.4558 1524.7279 c
2891.397 1531.7573 2868.603 1531.7573 2854.5442 1524.7279 c
2840.4854 1517.6985 2840.4854 1506.3015 2854.5442 1499.2721 c
2868.603 1492.2427 2891.397 1492.2427 2905.4558 1499.2721 c
S
/Cs2 SC
0 sc
0 i
2857.552 1517.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
245.45581 157.72791 m
259.51474 150.69847 259.51474 139.30153 245.45581 132.27209 c
231.39696 125.24262 208.60304 125.24262 194.54419 132.27209 c
180.48524 139.30153 180.48524 150.69847 194.54419 157.72791 c
208.60304 164.75737 231.39696 164.75737 245.45581 157.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
2689.4558 1409.2721 m
2703.5146 1416.3015 2703.5146 1427.6985 2689.4558 1434.7279 c
2675.397 1441.7573 2652.603 1441.7573 2638.5442 1434.7279 c
2624.4854 1427.6985 2624.4854 1416.3015 2638.5442 1409.2721 c
2652.603 1402.2427 2675.397 1402.2427 2689.4558 1409.2721 c
S
/Cs2 SC
0 sc
0 i
2641.552 1427.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
425.45581 157.72791 m
439.51474 150.69847 439.51474 139.30153 425.45581 132.27209 c
411.39694 125.24262 388.60306 125.24262 374.54419 132.27209 c
360.48526 139.30153 360.48526 150.69847 374.54419 157.72791 c
388.60306 164.75737 411.39694 164.75737 425.45581 157.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
2869.4558 1409.2721 m
2883.5146 1416.3015 2883.5146 1427.6985 2869.4558 1434.7279 c
2855.397 1441.7573 2832.603 1441.7573 2818.5442 1434.7279 c
2804.4854 1427.6985 2804.4854 1416.3015 2818.5442 1409.2721 c
2832.603 1402.2427 2855.397 1402.2427 2869.4558 1409.2721 c
S
/Cs2 SC
0 sc
0 i
2821.552 1427.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
659.45581 157.72791 m
673.51477 150.69847 673.51477 139.30153 659.45581 132.27209 c
645.39697 125.24262 622.60303 125.24262 608.54419 132.27209 c
594.48523 139.30153 594.48523 150.69847 608.54419 157.72791 c
622.60303 164.75737 645.39697 164.75737 659.45581 157.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
3103.4558 1409.2721 m
3117.5146 1416.3015 3117.5146 1427.6985 3103.4558 1434.7279 c
3089.397 1441.7573 3066.603 1441.7573 3052.5442 1434.7279 c
3038.4854 1427.6985 3038.4854 1416.3015 3052.5442 1409.2721 c
3066.603 1402.2427 3089.397 1402.2427 3103.4558 1409.2721 c
S
/Cs2 SC
0 sc
0 i
3055.552 1427.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
2957 1424 m
(/)s
0.60000002 i
/Cs1 SC
0 0 0 sc
2691.6577 1433.524 m
2843.2039 1496.6682 l
S
0 i
CM
406.58847 67.254807 m
400.3577 73.100967 l
398.04999 67.5625 l
h
406.58847 67.254807 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2850.5884 1499.7452 m
2844.3577 1493.899 l
2842.05 1499.4375 l
h
2850.5884 1499.7452 m
S
1 J
1 j
0.60000002 i
2851.061 1439.6523 m
2869.2622 1485.1558 l
S
0 i
CM
428.23343 74.416435 m
428.04773 82.95842 l
422.47687 80.730072 l
h
428.23343 74.416435 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2872.2334 1492.5836 m
2872.0479 1484.0416 l
2866.4768 1486.2699 l
h
2872.2334 1492.5836 m
S
1 J
1 j
0.60000002 i
3051.3616 1434.1084 m
2915.6509 1495.795 l
S
0 i
CM
464.36807 67.894569 m
472.8924 68.4739 l
470.40958 73.936096 l
h
464.36807 67.894569 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2908.3682 1499.1055 m
2916.8923 1498.5261 l
2914.4097 1493.064 l
h
2908.3682 1499.1055 m
S
1 1 1 sc
CM
119.45582 247.72791 m
133.51476 240.69847 133.51476 229.30153 119.45582 222.27209 c
105.39695 215.24263 82.60305 215.24263 68.544182 222.27209 c
54.485249 229.30153 54.485249 240.69847 68.544182 247.72791 c
82.60305 254.75737 105.39695 254.75737 119.45582 247.72791 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
2563.4558 1319.2721 m
2577.5146 1326.3015 2577.5146 1337.6985 2563.4558 1344.7279 c
2549.397 1351.7573 2526.603 1351.7573 2512.5442 1344.7279 c
2498.4854 1337.6985 2498.4854 1326.3015 2512.5442 1319.2721 c
2526.603 1312.2427 2549.397 1312.2427 2563.4558 1319.2721 c
S
/Cs2 SC
0 sc
0 i
2515.552 1337.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
245.45581 247.72791 m
259.51474 240.69847 259.51474 229.30153 245.45581 222.27209 c
231.39696 215.24263 208.60304 215.24263 194.54419 222.27209 c
180.48524 229.30153 180.48524 240.69847 194.54419 247.72791 c
208.60304 254.75737 231.39696 254.75737 245.45581 247.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
2689.4558 1319.2721 m
2703.5146 1326.3015 2703.5146 1337.6985 2689.4558 1344.7279 c
2675.397 1351.7573 2652.603 1351.7573 2638.5442 1344.7279 c
2624.4854 1337.6985 2624.4854 1326.3015 2638.5442 1319.2721 c
2652.603 1312.2427 2675.397 1312.2427 2689.4558 1319.2721 c
S
/Cs2 SC
0 sc
0 i
2641.552 1337.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
2558.6482 1346.7487 m
2635.2959 1401.4971 l
S
0 i
CM
197.80583 160.85298 m
193.03969 167.94408 l
189.55225 163.06168 l
h
197.80583 160.85298 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2641.8059 1406.147 m
2637.0398 1399.0559 l
2633.5522 1403.9384 l
h
2641.8059 1406.147 m
S
1 J
1 j
0.60000002 i
2664 1350 m
2664 1394.1 l
S
0 i
CM
220 164.90001 m
223 172.90001 l
217 172.90001 l
h
220 164.90001 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2664 1402.1 m
2667 1394.1 l
2661 1394.1 l
h
2664 1402.1 m
S
/Cs2 SC
0 sc
2597 1334 m
(/)s
/Cs1 SC
1 1 1 sc
CM
353.45581 247.72791 m
367.51474 240.69847 367.51474 229.30153 353.45581 222.27209 c
339.39694 215.24263 316.60306 215.24263 302.54419 222.27209 c
288.48526 229.30153 288.48526 240.69847 302.54419 247.72791 c
316.60306 254.75737 339.39694 254.75737 353.45581 247.72791 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
2797.4558 1319.2721 m
2811.5146 1326.3015 2811.5146 1337.6985 2797.4558 1344.7279 c
2783.397 1351.7573 2760.603 1351.7573 2746.5442 1344.7279 c
2732.4854 1337.6985 2732.4854 1326.3015 2746.5442 1319.2721 c
2760.603 1312.2427 2783.397 1312.2427 2797.4558 1319.2721 c
S
/Cs2 SC
0 sc
0 i
2749.552 1337.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
479.45581 247.72791 m
493.51474 240.69847 493.51474 229.30153 479.45581 222.27209 c
465.39694 215.24263 442.60306 215.24263 428.54419 222.27209 c
414.48526 229.30153 414.48526 240.69847 428.54419 247.72791 c
442.60306 254.75737 465.39694 254.75737 479.45581 247.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
2923.4558 1319.2721 m
2937.5146 1326.3015 2937.5146 1337.6985 2923.4558 1344.7279 c
2909.397 1351.7573 2886.603 1351.7573 2872.5442 1344.7279 c
2858.4854 1337.6985 2858.4854 1326.3015 2872.5442 1319.2721 c
2886.603 1312.2427 2909.397 1312.2427 2923.4558 1319.2721 c
S
/Cs2 SC
0 sc
0 i
2875.552 1337.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
2785.3735 1348.7169 m
2824.4421 1397.5525 l
S
0 i
CM
385.43958 163.20052 m
382.78464 171.32155 l
378.09943 167.57338 l
h
385.43958 163.20052 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2829.4397 1403.7994 m
2826.7847 1395.6785 l
2822.0994 1399.4266 l
h
2829.4397 1403.7994 m
S
1 J
1 j
0.60000002 i
2887.6536 1349.2443 m
2859.4399 1396.2666 l
S
0 i
CM
411.32407 163.87344 m
418.01251 169.18991 l
412.86755 172.27689 l
h
411.32407 163.87344 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2855.324 1403.1266 m
2862.0125 1397.8101 l
2856.8677 1394.7231 l
h
2855.324 1403.1266 m
S
/Cs2 SC
0 sc
2831 1334 m
(/)s
/Cs1 SC
1 1 1 sc
CM
605.45581 247.72791 m
619.51477 240.69847 619.51477 229.30153 605.45581 222.27209 c
591.39697 215.24263 568.60303 215.24263 554.54419 222.27209 c
540.48523 229.30153 540.48523 240.69847 554.54419 247.72791 c
568.60303 254.75737 591.39697 254.75737 605.45581 247.72791 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
3049.4558 1319.2721 m
3063.5146 1326.3015 3063.5146 1337.6985 3049.4558 1344.7279 c
3035.397 1351.7573 3012.603 1351.7573 2998.5442 1344.7279 c
2984.4854 1337.6985 2984.4854 1326.3015 2998.5442 1319.2721 c
3012.603 1312.2427 3035.397 1312.2427 3049.4558 1319.2721 c
S
/Cs2 SC
0 sc
0 i
3001.552 1337.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
731.45581 247.72791 m
745.51477 240.69847 745.51477 229.30153 731.45581 222.27209 c
717.39697 215.24263 694.60303 215.24263 680.54419 222.27209 c
666.48523 229.30153 666.48523 240.69847 680.54419 247.72791 c
694.60303 254.75737 717.39697 254.75737 731.45581 247.72791 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -2444 1567 cm
3175.4558 1319.2721 m
3189.5146 1326.3015 3189.5146 1337.6985 3175.4558 1344.7279 c
3161.397 1351.7573 3138.603 1351.7573 3124.5442 1344.7279 c
3110.4854 1337.6985 3110.4854 1326.3015 3124.5442 1319.2721 c
3138.603 1312.2427 3161.397 1312.2427 3175.4558 1319.2721 c
S
/Cs2 SC
0 sc
0 i
3127.552 1337.776 m
(+,-.,)[ 13.648000 8.592000 4.880000 9.184000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
3034.3464 1349.2443 m
3062.5601 1396.2666 l
S
0 i
CM
622.6759 163.87344 m
621.13245 172.27689 l
615.98749 169.18991 l
h
622.6759 163.87344 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
3066.676 1403.1266 m
3065.1323 1394.7231 l
3059.9875 1397.8101 l
h
3066.676 1403.1266 m
S
1 J
1 j
0.60000002 i
3136.6265 1348.7169 m
3097.5579 1397.5525 l
S
0 i
CM
648.56042 163.20052 m
655.90057 167.57338 l
651.21539 171.32155 l
h
648.56042 163.20052 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
3092.5603 1403.7994 m
3099.9006 1399.4266 l
3095.2153 1395.6785 l
h
3092.5603 1403.7994 m
S
/Cs2 SC
0 sc
3083 1334 m
(/)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
2880 1530 m
2880 1556.1 l
S
0 i
CM
436 2.9000001 m
439 10.9 l
433 10.9 l
h
436 2.9000001 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2880 1564.1 m
2883 1556.1 l
2877 1556.1 l
h
2880 1564.1 m
S
1 0.49327001 0.47400001 sc
2627 1283 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
1 J
1 j
[
2
2
] 0 d
0.60000002 i
0.7019608 0.26666668 0 sc
2624.8694 1394.0496 m
2624.8694 1394.0496 2634.9141 1387.1687 2646 1386 c
2657.0859 1384.8313 2664 1389.9244 2664 1389.9244 c
S
1 0.49327001 0.47400001 sc
0 i
2585 1382.776 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
0.60000002 i
1 0.49327201 0.47399801 sc
2820 1392 m
2820 1392 2825.5322 1380.9482 2838 1380 c
2850.4678 1379.0518 2864.0083 1388.6528 2864.0083 1388.6528 c
S
1 0.49327001 0.47400001 sc
0 i
2807 1373.776 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
0.60000002 i
1 0.49327201 0.47399801 sc
3059.3235 1390.8726 m
3059.3235 1390.8726 3065.502 1382.4142 3078 1382.224 c
3090.498 1382.0338 3103.439 1390.2012 3103.439 1390.2012 c
S
2825.4675 1489.2781 m
2825.4675 1489.2781 2848.0288 1471.0728 2880 1470 c
2911.9712 1468.9272 2938.3186 1485.4916 2938.3186 1485.4916 c
S
1 0.49327001 0.47400001 sc
0 i
2884.7419 1460 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
3034.7419 1373.776 m
(!"#$%&'\(\)*)[ 13.936000 6.224000 8.896000 4.448000 3.552000 8.896000 9.488000 8.896000 5.040000 0.000000 ] xS
[] 0 d
0.60000002 i
0 0 0 sc
2448 1335.9 m
2448 1538.1 l
S
0 i
CM
4 20.9 m
7 28.9 l
1 28.9 l
h
4 20.9 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2448 1546.1 m
2451 1538.1 l
2445 1538.1 l
h
2448 1546.1 m
S
CM
4 239.10001 m
1 231.10001 l
7 231.10001 l
h
4 239.10001 m
f
1 0 0 -1 -2444 1567 cm
2448 1327.9 m
2445 1335.9 l
2451 1335.9 l
h
2448 1327.9 m
S
/Cs2 SC
0 sc
2462.2615 1442 m
(01.)[ 3.552000 9.184000 0.000000 ] xS
/F2.1[ 11 0 0 -11 0 0]sf
2484.1814 1447 m
(!"#)[ 9.570000 4.279000 0.000000 ] xS
/F1.1[ 16 0 0 -16 0 0]sf
2504.1465 1442 m
($)s
/F2.1[ 16 0 0 -16 0 0]sf
2508.5945 1442 m
($)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
3176.1001 1257 m
2511.8999 1257 l
S
0 i
CM
59.900002 310 m
67.900002 307 l
67.900002 313 l
h
59.900002 310 m
f
0 J
0 j
1 0 0 -1 -2444 1567 cm
2503.8999 1257 m
2511.8999 1260 l
2511.8999 1254 l
h
2503.8999 1257 m
S
CM
740.09998 310 m
732.09998 313 l
732.09998 307 l
h
740.09998 310 m
f
1 0 0 -1 -2444 1567 cm
3184.1001 1257 m
3176.1001 1254 l
3176.1001 1260 l
h
3184.1001 1257 m
S
/Cs2 SC
0 sc
2789.52 1244 m
($%)[ 11.552000 0.000000 ] xS
/F1.1[ 16 0 0 -16 0 0]sf
2805.52 1244 m
(*1-\),2$30,*)[ 8.000000 9.184000 5.328000 5.040000 8.592000 9.488000 4.448000 8.288000 3.552000 8.592000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
