%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 722.000000 578.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.6 (Build 19G2021) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 722 578
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 722 578
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin
/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /zero put
dup 34 /one put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/uni20BE 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1947 -985 2961 2297} readonly def
/UniqueID 4065484 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2878974AB253FC8F6E50D35D384423D89D255799B15B5BC324012A5406A0E2F3CCA064190D057F2C6A391C3A448637F4A4FDAD1C71EAD9C464665DEE168B2B2A86EE8A7A87F9E2DED781A6BED7FF3F7E19508F7FCB6C66ED68F3F5A07AF251AD48F6D444048E2A079C2B6B655A9804E053AF010DC7201FDF250EF060CC765BB3078AB903E125D59B7B786AD51F4CC6FECC09F6743D9FFF74A836B0A2002EF8534E1DB7C0C788AA40A2161C96FABD848433174834D8B60460DEF2353D1B84473B1330DEA05CCD1BBEBCF221DA56014FBF27493650D479EECB594365BD24717C5CA64741E7F9CD149130534861C7BE48BA40D2E1AAA31B6EB26E457F35763CD210459002BFA695CAA09A86A54DC23E9A993B8C030533A81A34C0C6D492C6514BDF7DF9FEDD1C817BAAC4B7FBCC64F9A17A6358F7ACD610006027A348A20F418E5A63DA4281F467A1684A4285B3293E0C4B498B4C216F1199925A6F4DDB4F61F7E0D024C3012A66706EE8769691FF4A0DAA8622AAA4519B157D192EC2F3B1034DE0EB2CBF5603FB7D0B6C55208DD067106790877DE72B99305B3FBEC64B089590C778E2F468DE6D623ACC962F3D53AFBF401982BAF00F032C85A48EA8EC2A00B4119B373FC52E7BB14451EAFD3B6592A6BAE368F0FF9CCD7B490004196EF41F51704DC881F82CED847A6FE748BE8C1C02113AB54FC3FF141A275D3498451797B03255B1C8529364B465A41353EBDCC4CE067AAD136B08BF3879AF08AFF1C03B3ABDD550ED2F6
D77D6B97B2D1988BD4DC8DD7AAC5B55CA2C533181DEDA641F24948F6C3D395266B92118B83EB7459AAB636B9B64E1960C2B2220906814C14699CE764177D3815A523B93C5CC312B373639E875A3706DFC2408D5E27D056ED097974A389A6C2D54F28F989A699B0BC3BEBAE318C408DFED9B722C1CE5E68918F2776A09FE8AB01D812DC25ED1A921C7E1B7DF2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F1.1/Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
[
2
2
] 0 d
0.60000002 i
/Cs1 SC
0.5 0.5 0.5 sc
q
0 0 722 578 rc
1 0 0 -1 541 -107 cm
-540 -684 m
-360 -684 l
-360 -648 l
-540 -648 l
h
-540 -684 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
-476.69531 -660.5 m
(!!!!!!)[ 8.898438 8.898438 8.898438 8.898438 8.898438 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-540 -648 m
-360 -648 l
-360 -612 l
-540 -612 l
h
-540 -648 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-476.69531 -624.5 m
(!!!!!")[ 8.898438 8.898438 8.898438 8.898438 8.898438 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-540 -612 m
-360 -612 l
-360 -576 l
-540 -576 l
h
-540 -612 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-476.69531 -588.5 m
(!!!!"!)[ 8.898438 8.898438 8.898438 8.898438 8.898438 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-540 -576 m
-360 -576 l
-360 -540 l
-540 -540 l
h
-540 -576 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-476.10547 -552.5 m
(!!!!"")[ 8.898438 8.898438 8.898438 8.898438 7.718750 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-360 -684 m
-180 -684 l
-180 -648 l
-360 -648 l
h
-360 -684 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-296.69531 -660.5 m
(!"!!!!)[ 8.898438 8.898438 8.898438 8.898438 8.898438 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-360 -648 m
-180 -648 l
-180 -612 l
-360 -612 l
h
-360 -648 m
S
-360 -612 m
-180 -612 l
-180 -576 l
-360 -576 l
h
-360 -612 m
S
-360 -576 m
-180 -576 l
-180 -540 l
-360 -540 l
h
-360 -576 m
S
-180 -684 m
0 -684 l
0 -648 l
-180 -648 l
h
-180 -684 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-116.69531 -660.5 m
("!!!!!)[ 8.898438 8.898438 8.898438 8.898438 8.898438 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-180 -648 m
0 -648 l
0 -612 l
-180 -612 l
h
-180 -648 m
S
-180 -612 m
0 -612 l
0 -576 l
-180 -576 l
h
-180 -612 m
S
-180 -576 m
0 -576 l
0 -540 l
-180 -540 l
h
-180 -576 m
S
0 -684 m
180 -684 l
180 -648 l
0 -648 l
h
0 -684 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
63.894531 -660.5 m
(""!!!!)[ 7.718750 8.898438 8.898438 8.898438 8.898438 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
0 -648 m
180 -648 l
180 -612 l
0 -612 l
h
0 -648 m
S
0 -612 m
180 -612 l
180 -576 l
0 -576 l
h
0 -612 m
S
0 -576 m
180 -576 l
180 -540 l
0 -540 l
h
0 -576 m
S
-540 -540 m
-360 -540 l
-360 -504 l
-540 -504 l
h
-540 -540 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-476.69531 -516.5 m
(!!!"!!)[ 8.898438 8.898438 8.898438 8.898438 8.898438 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-540 -504 m
-360 -504 l
-360 -468 l
-540 -468 l
h
-540 -504 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-476.69531 -480.5 m
(!!!"!")[ 8.898438 8.898438 8.898438 8.898438 8.898438 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-540 -468 m
-360 -468 l
-360 -432 l
-540 -432 l
h
-540 -468 m
S
-540 -432 m
-360 -432 l
-360 -396 l
-540 -396 l
h
-540 -432 m
S
-360 -540 m
-180 -540 l
-180 -504 l
-360 -504 l
h
-360 -540 m
S
-360 -504 m
-180 -504 l
-180 -468 l
-360 -468 l
h
-360 -504 m
S
-360 -468 m
-180 -468 l
-180 -432 l
-360 -432 l
h
-360 -468 m
S
-360 -432 m
-180 -432 l
-180 -396 l
-360 -396 l
h
-360 -432 m
S
-180 -540 m
0 -540 l
0 -504 l
-180 -504 l
h
-180 -540 m
S
-180 -504 m
0 -504 l
0 -468 l
-180 -468 l
h
-180 -504 m
S
-180 -468 m
0 -468 l
0 -432 l
-180 -432 l
h
-180 -468 m
S
-180 -432 m
0 -432 l
0 -396 l
-180 -396 l
h
-180 -432 m
S
0 -540 m
180 -540 l
180 -504 l
0 -504 l
h
0 -540 m
S
0 -504 m
180 -504 l
180 -468 l
0 -468 l
h
0 -504 m
S
0 -468 m
180 -468 l
180 -432 l
0 -432 l
h
0 -468 m
S
0 -432 m
180 -432 l
180 -396 l
0 -396 l
h
0 -432 m
S
-540 -396 m
-360 -396 l
-360 -360 l
-540 -360 l
h
-540 -396 m
S
-540 -360 m
-360 -360 l
-360 -324 l
-540 -324 l
h
-540 -360 m
S
-540 -324 m
-360 -324 l
-360 -288 l
-540 -288 l
h
-540 -324 m
S
-540 -288 m
-360 -288 l
-360 -252 l
-540 -252 l
h
-540 -288 m
S
-360 -396 m
-180 -396 l
-180 -360 l
-360 -360 l
h
-360 -396 m
S
-360 -360 m
-180 -360 l
-180 -324 l
-360 -324 l
h
-360 -360 m
S
-360 -324 m
-180 -324 l
-180 -288 l
-360 -288 l
h
-360 -324 m
S
-360 -288 m
-180 -288 l
-180 -252 l
-360 -252 l
h
-360 -288 m
S
-180 -396 m
0 -396 l
0 -360 l
-180 -360 l
h
-180 -396 m
S
-180 -360 m
0 -360 l
0 -324 l
-180 -324 l
h
-180 -360 m
S
-180 -324 m
0 -324 l
0 -288 l
-180 -288 l
h
-180 -324 m
S
-180 -288 m
0 -288 l
0 -252 l
-180 -252 l
h
-180 -288 m
S
0 -396 m
180 -396 l
180 -360 l
0 -360 l
h
0 -396 m
S
0 -360 m
180 -360 l
180 -324 l
0 -324 l
h
0 -360 m
S
0 -324 m
180 -324 l
180 -288 l
0 -288 l
h
0 -324 m
S
0 -288 m
180 -288 l
180 -252 l
0 -252 l
h
0 -288 m
S
-540 -252 m
-360 -252 l
-360 -216 l
-540 -216 l
h
-540 -252 m
S
-540 -216 m
-360 -216 l
-360 -180 l
-540 -180 l
h
-540 -216 m
S
-540 -180 m
-360 -180 l
-360 -144 l
-540 -144 l
h
-540 -180 m
S
-540 -144 m
-360 -144 l
-360 -108 l
-540 -108 l
h
-540 -144 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-474.92578 -120.5 m
(!!"""")[ 8.898438 8.898438 7.718750 7.718750 7.718750 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-360 -252 m
-180 -252 l
-180 -216 l
-360 -216 l
h
-360 -252 m
S
-360 -216 m
-180 -216 l
-180 -180 l
-360 -180 l
h
-360 -216 m
S
-360 -180 m
-180 -180 l
-180 -144 l
-360 -144 l
h
-360 -180 m
S
-360 -144 m
-180 -144 l
-180 -108 l
-360 -108 l
h
-360 -144 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-294.33594 -120.5 m
(!""""")[ 8.898438 7.718750 7.718750 7.718750 7.718750 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
-180 -252 m
0 -252 l
0 -216 l
-180 -216 l
h
-180 -252 m
S
-180 -216 m
0 -216 l
0 -180 l
-180 -180 l
h
-180 -216 m
S
-180 -180 m
0 -180 l
0 -144 l
-180 -144 l
h
-180 -180 m
S
-180 -144 m
0 -144 l
0 -108 l
-180 -108 l
h
-180 -144 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
-114.92578 -120.5 m
("!"""")[ 8.898438 8.898438 7.718750 7.718750 7.718750 0.000000 ] xS
0.60000002 i
0.5 0.5 0.5 sc
0 -252 m
180 -252 l
180 -216 l
0 -216 l
h
0 -252 m
S
0 -216 m
180 -216 l
180 -180 l
0 -180 l
h
0 -216 m
S
0 -180 m
180 -180 l
180 -144 l
0 -144 l
h
0 -180 m
S
0 -144 m
180 -144 l
180 -108 l
0 -108 l
h
0 -144 m
S
0.40000001 0.40000001 0.40000001 sc
0 i
66.253906 -120.5 m
("""""")[ 7.718750 7.718750 7.718750 7.718750 7.718750 0.000000 ] xS
1 1 1 sc
CM
81 350 m
97 350 l
98.104576 350 99 349.10458 99 348 c
99 66 l
99 64.895432 99.895432 64 101 64 c
104.17157 64 l
105.27615 64 106.17157 63.104572 106.17157 62 c
106.17157 61.46957 105.96086 60.960861 105.58578 60.585789 c
90.414215 45.414215 l
89.633163 44.633163 88.366837 44.633163 87.585785 45.414215 c
87.585785 45.414215 87.585785 45.414215 87.585785 45.414215 c
72.414215 60.585789 l
71.633163 61.366837 71.633163 62.633167 72.414215 63.414215 c
72.789284 63.789288 73.297997 64 73.82843 64 c
77 64 l
78.104568 64 79 64.895432 79 66 c
79 348 l
79 349.10458 79.895424 350 81 350 c
h
81 350 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 541 -107 cm
-460 -457 m
-444 -457 l
-442.89542 -457 -442 -456.10458 -442 -455 c
-442 -173 l
-442 -171.89543 -441.10455 -171 -440 -171 c
-436.82843 -171 l
-435.72385 -171 -434.82843 -170.10457 -434.82843 -169 c
-434.82843 -168.46957 -435.03915 -167.96086 -435.41422 -167.58578 c
-450.58578 -152.41422 l
-451.36682 -151.63316 -452.63318 -151.63316 -453.41422 -152.41422 c
-453.41422 -152.41422 -453.41422 -152.41422 -453.41422 -152.41422 c
-468.58578 -167.58578 l
-469.36682 -168.36684 -469.36682 -169.63316 -468.58578 -170.41422 c
-468.21072 -170.78929 -467.702 -171 -467.17157 -171 c
-464 -171 l
-462.89545 -171 -462 -171.89543 -462 -173 c
-462 -455 l
-462 -456.10458 -461.10458 -457 -460 -457 c
h
-460 -457 m
S
0 i
1 1 1 sc
CM
265 541 m
281 541 l
282.10458 541 283 540.10455 283 539 c
283 59 l
283 57.895432 283.89545 57 285 57 c
288.17157 57 l
289.27615 57 290.17157 56.104572 290.17157 55 c
290.17157 54.46957 289.96085 53.960861 289.58578 53.585789 c
274.41422 38.414215 l
273.63318 37.633163 272.36682 37.633163 271.58578 38.414215 c
271.58578 38.414215 271.58578 38.414215 271.58578 38.414215 c
256.41422 53.585789 l
255.63316 54.366837 255.63316 55.633167 256.41422 56.414215 c
256.78928 56.789288 257.298 57 257.82843 57 c
261 57 l
262.10455 57 263 57.895432 263 59 c
263 539 l
263 540.10455 263.89542 541 265 541 c
h
265 541 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 541 -107 cm
-276 -648 m
-260 -648 l
-258.89542 -648 -258 -647.10455 -258 -646 c
-258 -166 l
-258 -164.89543 -257.10455 -164 -256 -164 c
-252.82843 -164 l
-251.72386 -164 -250.82843 -163.10457 -250.82843 -162 c
-250.82843 -161.46957 -251.03914 -160.96086 -251.41422 -160.58578 c
-266.58578 -145.41422 l
-267.36682 -144.63316 -268.63318 -144.63316 -269.41422 -145.41422 c
-269.41422 -145.41422 -269.41422 -145.41422 -269.41422 -145.41422 c
-284.58578 -160.58578 l
-285.36682 -161.36684 -285.36682 -162.63316 -284.58578 -163.41422 c
-284.21072 -163.78929 -283.702 -164 -283.17157 -164 c
-280 -164 l
-278.89545 -164 -278 -164.89543 -278 -166 c
-278 -646 l
-278 -647.10455 -277.10458 -648 -276 -648 c
h
-276 -648 m
S
0 i
1 1 1 sc
CM
449.09802 540.85779 m
465.09802 540.85779 l
466.20258 540.85779 467.09802 539.96234 467.09802 538.85779 c
467.09802 58.857796 l
467.09802 57.753227 467.99344 56.857796 469.09802 56.857796 c
472.26959 56.857796 l
473.37415 56.857796 474.26959 55.962364 474.26959 54.857796 c
474.26959 54.327362 474.05887 53.818653 473.68381 53.443581 c
458.51224 38.272007 l
457.73117 37.490959 456.46484 37.490959 455.68381 38.272007 c
455.68381 38.272007 455.68381 38.272007 455.68381 38.272007 c
440.51224 53.443581 l
439.73117 54.224628 439.73117 55.490959 440.51224 56.272007 c
440.8873 56.647079 441.39603 56.857796 441.92645 56.857796 c
445.09802 56.857796 l
446.20258 56.857796 447.09802 57.753227 447.09802 58.857796 c
447.09802 538.85779 l
447.09802 539.96234 447.99344 540.85779 449.09802 540.85779 c
h
449.09802 540.85779 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 541 -107 cm
-91.901985 -647.85779 m
-75.901978 -647.85779 l
-74.797409 -647.85779 -73.901978 -646.96234 -73.901978 -645.85779 c
-73.901978 -165.85779 l
-73.901978 -164.75322 -73.006546 -163.85779 -71.901978 -163.85779 c
-68.730408 -163.85779 l
-67.625839 -163.85779 -66.730408 -162.96237 -66.730408 -161.85779 c
-66.730408 -161.32736 -66.941124 -160.81865 -67.316193 -160.44359 c
-82.48777 -145.272 l
-83.268814 -144.49095 -84.535149 -144.49095 -85.316193 -145.272 c
-85.316193 -145.272 -85.316193 -145.272 -85.316193 -145.272 c
-100.48777 -160.44359 l
-101.26881 -161.22462 -101.26881 -162.49097 -100.48777 -163.272 c
-100.11269 -163.64708 -99.603989 -163.85779 -99.073555 -163.85779 c
-95.901985 -163.85779 l
-94.797417 -163.85779 -93.901985 -164.75322 -93.901985 -165.85779 c
-93.901985 -645.85779 l
-93.901985 -646.96234 -93.006554 -647.85779 -91.901985 -647.85779 c
h
-91.901985 -647.85779 m
S
0 i
1 1 1 sc
CM
633.19604 540.71558 m
649.19604 540.71558 l
650.3006 540.71558 651.19604 539.82013 651.19604 538.71558 c
651.19604 58.715588 l
651.19604 57.611019 652.09149 56.715588 653.19604 56.715588 c
656.36761 56.715588 l
657.47217 56.715588 658.36761 55.820156 658.36761 54.715588 c
658.36761 54.185154 658.15692 53.676449 657.7818 53.301376 c
642.61023 38.129799 l
641.82922 37.348751 640.56287 37.348751 639.7818 38.129799 c
639.7818 38.129799 639.7818 38.129799 639.7818 38.129799 c
624.61023 53.301376 l
623.82922 54.082424 623.82922 55.348755 624.61023 56.129803 c
624.98535 56.504875 625.49402 56.715588 626.02448 56.715588 c
629.19604 56.715588 l
630.3006 56.715588 631.19604 57.611019 631.19604 58.715588 c
631.19604 538.71558 l
631.19604 539.82013 632.09149 540.71558 633.19604 540.71558 c
h
633.19604 540.71558 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 541 -107 cm
92.19603 -647.71558 m
108.19604 -647.71558 l
109.30061 -647.71558 110.19604 -646.82013 110.19604 -645.71558 c
110.19604 -165.71559 l
110.19604 -164.61102 111.09147 -163.71559 112.19604 -163.71559 c
115.36761 -163.71559 l
116.47218 -163.71559 117.36761 -162.82016 117.36761 -161.71559 c
117.36761 -161.18515 117.1569 -160.67645 116.78182 -160.30138 c
101.61025 -145.12981 l
100.8292 -144.34875 99.562874 -144.34875 98.781822 -145.12981 c
98.781822 -145.12981 98.781822 -145.12981 98.781822 -145.12981 c
83.610252 -160.30138 l
82.829201 -161.08243 82.829201 -162.34875 83.610252 -163.12981 c
83.985321 -163.50487 84.494026 -163.71559 85.02446 -163.71559 c
88.19603 -163.71559 l
89.300598 -163.71559 90.19603 -164.61102 90.19603 -165.71559 c
90.19603 -645.71558 l
90.19603 -646.82013 91.091461 -647.71558 92.19603 -647.71558 c
h
92.19603 -647.71558 m
S
ep
end
%%Trailer
%%EOF
