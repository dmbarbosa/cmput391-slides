%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 866.000000 343.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.6 (Build 19G2021) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 866 343
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 866 343
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /O put
dup 34 /S put
dup 35 /p put
dup 36 /r put
dup 37 /o put
dup 38 /g put
dup 39 /a put
dup 40 /m put
dup 41 /space put
dup 42 /A put
dup 43 /quoteright put
dup 44 /s put
dup 45 /v put
dup 46 /i put
dup 47 /t put
dup 48 /u put
dup 49 /l put
dup 50 /e put
dup 51 /y put
dup 52 /B put
dup 53 /h put
dup 54 /c put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000186670676D00000000000000B400000428676C796600000000000004DC0000137068656164000000000000184C0000003668686561000000000000188400000024686D747800000000000018A8000000606C6F63610000000000001908000000326D617870000000000000193C0000002070726570000000000000195C0000004D14000014004B005A00000011FF3A000B0205000C02CA0011B800002C4BB800095058B101018E59B801FF85B844001DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546






00>] def
/CharStrings 24 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/B 3 def
/O 4 def
/S 5 def
/a 6 def
/c 7 def
/e 8 def
/g 9 def
/h 10 def
/i 11 def
/l 12 def
/m 13 def
/o 14 def
/p 15 def
/r 16 def
/s 17 def
/t 18 def
/u 19 def
/v 20 def
/y 21 def
/quoteright 22 def
/uni20BE 23 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec

01B59ADF2B546AF75687709E7145919332F29C203E851E302332009FCD2A0DEB659003E9C58C6F1451725B28D8EBB3C523F8BD39DAED26DC54DE852AE67D7EBCE3CB55FE6DA89A0BF72FEF4447CD5A389BE3AD614257C0A3C71FAB0644F1FC4DBF303F59811814FC2F1E18379EE063EBF520B945F5E71DFC7C0E7B2F45530AD76E85BEBC5BF4AFEE4BEB30CAD84AF1B083C4BA1C82391CA73AB1B2D7B70C0F270FA5714FCE6A1C7F2BC4C4F7C67C0A74B269ECC2EEF6D00AAA7B8A87E0E7E57F6F54DF2E056C7AE11A3413A6BEBED47DFAD1B07F340AF20BDDA981288D5508C04ADFA9EA61EC48583D0F0036C6E6544E489F6390B3C6FAE592B694337689C9256900EAEBCC783B563BB5C73022C8A6E3C88053E0F1D55F2D3A731075FF381B27EFAF5053601FECE8E0025952B49E538D4A287DEE90CC9412552F41A96A142C79B182A549139E30CE341F482036A1BB7E7036EE49BA854DE0B28A3F2C685BD81A10C1CD4038910DDB0B5A53774D2DFD6C9203FE0AA2837C3C75033001FFB9A366F791F453C241B5C6A4407BC4494AC4471B45CD84EE76F3D1F32D07473773B982D8C7C556F7E14D1B1861DECFF6D5E75996E5A42A51FF78046BFA16F19AFD52D64BDF2E546AC1727F46F6882C0BE8CA51BA42F4D0158CBE5A9DCCC61CC880CABBB06F2087CCF32FFE7D99F554A7C69EB3CF0007451B39A116909D70E16B2ABE799596D5FF07209C9343EC2E277B20EB12C930420503D23960CE0E12A170AE4CA7198A1EFBC2B47950A5E13F48E9CA111FC2C30877CEB2004F3EFF2D73679354E28B96679293343776C84A967077250327C7BFDF52DD29DC8838C33E5381B816F016F189D1CA3F5EB79885826E5E9F9A5D4CD8A215848CE616FF3689081E0076EF2599E65F3A49F7E8BF15FD1E5C5504C1E5B3C05C7E028B99AAFBB1168C1C85EF2D74525B466408A871EA84E6F11355E1F6CFEFBD76F3D7E67C6BB5F6085EE111EC7775264485F4C76249BD1BB751A43CD4452FDEB35D5C664A9848E38E613077D2C01F32521B870E92968EDC780E3A25A4CFC9671D0CAD5DFF120A658A6DA2EE43155A072F971A67F1AC4ED1F32215EC6D93A5FA716A109E110C983D2E9771F35D19C51A1F6F3ED4322C6DE6C8C0C87C288BD64B442D22BBD6EECA4B68845FF4757433F0FEAD60EAAF0495C9286F9ACB8626C9D778A6F970EB9E1DCEB1332B110B8A3E5B634F8B3C9E0F3195421F139649D2EBCC68A348E1028FB9E5634D1587C848CC5F7FDC796D77AA691247ADFDE267877258716FAFD96AF36C208CCF2E42B65F4CACA01DFB53B6DFFAD68B3A8DEB89101F9BB4EB6B8030CFD905CE1825AC26A112C72676202AC4D6F35D6A7C305EA054C6B788329B75C7EB4EBA51CD26B5FE407BA9BE9372C4C566BFE2769558090D4BF37A853916CFC3B008893912A876

8092C3D2BB14F65331D6D3F74BEABF764B218AE07A824D6C0DF7C91FCC2AA789160C5066C6330281299CC41276CFCFE0A9DA637678EA075A106750AA9158D643047244F8770128ECC009D1F5415A2B9F456325A592546731685CD5F5D8389406110E328EF0658736879C326521EDC62B40A91107A67E99BFD71DBC96AF57565C05B9ABCE71CECC71CE5F7691C3335D5F8DC2B63BA7DD0D6A227109FD49DBDF943E54577ECC4AF217BCB58E019BBDFE908A863B2B8CA7440F630B9FB31455689536EF0719E5252A34DE3C2DF4EF19BDB69506DEE379F608EA73B2E39A9ADA6C134C8F9DABDB748C9514C1CEC0E1F219675B232E300DFDADE6A4A479439B6920F4C3D2B9AA9913D1209F199B0B73832ADDCD6DC6B79848FC9C779101A56E708F553793C41FA4A5C7CED342BF5B1933F998A1E80A58250F24E50387DF8BDD925B1970B854BF2755BC85AB5356D1973D47624A6AA685296596786FDE271FDADF789D8EF5E98788880E3BDE509A92BB36BC2EFEFED737C669E46A9F3A6EAE872EF8F675B6C42C206725868AC4B31407628B089DADC927F33277AB176E6BFEAB3BE718A33081A509AF8D0A859688B8D797E8434E6D308E4ACEF2A0D28CBF65E7B88F12E91E02A3EC867B80483C2E1C173569699F0C7CDD86957F000B18B9FB30E11BFDE1F1CF179DE6D9BD1D1FA4AD13156CF94268A4441F6A980986845E1A685E90FF6E2C079037850EADDCBEF185BD25EDAF5BDFEB64B6F3E197ACD8BB67903D86F43A1BE515EB91AF08E8227B3A315916046E18933DDDF095B2F3C713516FEB3C5FF2BDE92F9EC27D631AB66DB6EA3AD140BB02C9B6784EBBE7826ABD76178F00F80D030DE6F3185C5EB479C86737B50E06F81781B70C652E6107EB7B5966268ECD7D846A1625560F139334473E3791F07904382BE90A1FE5BA9D6A977792D017891807BCAEFE163489E9CB31638A854053961534C267E27D828C930A0D57D74841D4F1787502354EC337FC46B56FBFC206CB46F030C5C3CDE505E76BF5DAE6ED19B3A36341B8D52E2E6C8F192CCF72526FA5F0C200954CC46476D6D525BC7D35FD0D8CB3B5DBB3F66264F1156FA62E9F76609E79872CCA54D5A6DBE915D22633B90F370ACED4F820F51418C18AA297066E914E4E9D2BECBB114FFF0B91E25F698F5234975E573FCF3878FEB20B2FED8D948EB6D2044F7630EFEEF0287177B31F9AD59262E56BA999164EE0E935C0A13996B39691EC2D0D9DCBC04210ABB2249C8A540BE2903438891FD24E7A2E476690A77C69AC2EBF88F68EFBFBDBC1AC8F1811EFE5FCEF113F3BC822AFE9180FD0C098CD288D0D2AACA776649AFCB4BE724C857730596D2FF9F0BD6AADA04A8F2E16419D6419A4548F60FD9D90FE4684EFFD40262DA2E9F3DD3C5DEEDFC0A162AD79702BC49BC656E1F1C6B3945659E728A1AE
F972EF3E7F1AEF7CC839F5AA7937393DB018947710A78DBA61BDC4C2555381E2821F6F8F9DB7F13CB5613A826722079120CD2688A53E5DEFFEE3CF39707AA2576335D604252ECD49AF9E6A74ADAFA6FEB2D0088DBE488D2CA2AD38EE953F2C066E2BE594BA50EEE98EC9757B3728D6DF1BEF7D27CCBAF7CEA1CC779D11741FFCBA4FF18B7AA36B17D90D1CAF724E53B19ECBABDC304FE19D549CAD17DAB038DBB81D1E1849A5BAC3AD223213C45B623C63E7CF5F4BA713C2B30277C060488FCBA300C0AA85605DA07A4C4AECC6B8575DDAD0858B9CF1A357664306D79CD1334335BCE3AABF0E193A1C29F75330CF43CBB15F60F1AFBD23E89B0CB60A88C7A86C0E071B2CAF414EDE7AC07491581C2E9C27EC394B7E84DFCF0661868F19B3AF9096A87B86593691DAD6D10288477E085E89C1D99975D99A2674873E3D844ED842643A4141420D64A55BF7F98CF22D50B4F149EECB1424D5DF606C5DD6D3C266936DFAF316B5AB6D384E81E6FE5232234BBBD1B734760E26D7B20B8C231B2437AA6E9EF7F9E550637C996F8FB18D048134E079B99099AAB98B98F583CF342B4F5C52FA0D68071FEF21B2845679848C01B7D3907AB5ABDD126662FFC5A57979437B3C436DD9C401E778CD2A53DABA452F8AFF7C83563E8F3C21BD8DC9600D9CAA590F97FFE08C0DE0166FF8B93EA2D6C73CC29789BABA0198F502E5B617198596EAC0B3BC3FE257DE14600AA7F256E7DCD8E25D9757C39A977B575413C92B4397C3AF1A7900387EEB065847A050D652984296D39420D2D1044AD93B0CFFE723CFA79F92AF408412A46081788B94FE9098FD17A8D002A94894074735F74F82EAE28DEDEE95111409D70052CA704F0BB4773D64E6A55A868FA275B9053330153A6548CC16ECF77BEC34DAE155C0640B730E229B2D503407FC1193A8A14952EA0FF9236AEC5750A557AF049575C7C19BF36B6451C6C974BCE8C9D27EB8EB29364DC2F804EA1AA5CFE3AC9553BC052ED2827013214972E19F1A343528D159A88D2BC06C50CEFB7EB3C6E96B4EF14BC195108BBD2A508CE248DD8F5CABE774F8CB93C60FF9DDF431414EE889FD3A1686FDA75E126110D2C06B1091BB3D5C122107
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 866 343 rc
1 0 0 -1 -1331 181 cm
1332 -126 m
1386 -126 l
1386 -72 l
1332 -72 l
h
1332 -126 m
S
1386 -126 m
1440 -126 l
1440 -72 l
1386 -72 l
h
1386 -126 m
S
1818 -126 m
1872 -126 l
1872 -72 l
1818 -72 l
h
1818 -126 m
S
0 i
/Cs2 SC
1 1 0.75 sc
CM
109 307 m
163 307 l
163 253 l
109 253 l
h
109 307 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1440 -126 m
1494 -126 l
1494 -72 l
1440 -72 l
h
1440 -126 m
S
0 i
/Cs2 SC
1 1 0.75 sc
CM
163 307 m
217 307 l
217 253 l
163 253 l
h
163 307 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1494 -126 m
1548 -126 l
1548 -72 l
1494 -72 l
h
1494 -126 m
S
1602 -126 m
1656 -126 l
1656 -72 l
1602 -72 l
h
1602 -126 m
S
1656 -126 m
1710 -126 l
1710 -72 l
1656 -72 l
h
1656 -126 m
S
1710 -126 m
1764 -126 l
1764 -72 l
1710 -72 l
h
1710 -126 m
S
1764 -126 m
1818 -126 l
1818 -72 l
1764 -72 l
h
1764 -126 m
S
0 i
/Cs2 SC
1 1 0.75 sc
CM
217 307 m
271 307 l
271 253 l
217 253 l
h
217 307 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1548 -126 m
1602 -126 l
1602 -72 l
1548 -72 l
h
1548 -126 m
S
1872 -126 m
1926 -126 l
1926 -72 l
1872 -72 l
h
1872 -126 m
S
1926 -126 m
1980 -126 l
1980 -72 l
1926 -72 l
h
1926 -126 m
S
1980 -126 m
2034 -126 l
2034 -72 l
1980 -72 l
h
1980 -126 m
S
2034 -126 m
2088 -126 l
2088 -72 l
2034 -72 l
h
2034 -126 m
S
2088 -126 m
2142 -126 l
2142 -72 l
2088 -72 l
h
2088 -126 m
S
2142 -126 m
2196 -126 l
2196 -72 l
2142 -72 l
h
2142 -126 m
S
0 i
/Cs2 SC
0.75 1 0.75 sc
CM
1 181 m
55 181 l
55 127 l
1 127 l
h
1 181 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1332 0 m
1386 0 l
1386 54 l
1332 54 l
h
1332 0 m
S
/Cs3 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
1347.736 32.776001 m
(!")[ 12.160000 0.000000 ] xS
/Cs2 SC
0.75 1 0.75 sc
CM
55 181 m
109 181 l
109 127 l
55 127 l
h
55 181 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1386 0 m
1440 0 l
1440 54 l
1386 54 l
h
1386 0 m
S
/Cs3 SC
0 sc
0 i
1401.736 32.776001 m
(!")[ 12.160000 0.000000 ] xS
/Cs2 SC
1 1 0.75 sc
CM
163 181 m
217 181 l
217 127 l
163 127 l
h
163 181 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1494 0 m
1548 0 l
1548 54 l
1494 54 l
h
1494 0 m
S
0 i
/Cs2 SC
1 0.75 0.75 sc
CM
379 181 m
433 181 l
433 127 l
379 127 l
h
379 181 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1710 0 m
1764 0 l
1764 54 l
1710 54 l
h
1710 0 m
S
0 i
/Cs2 SC
1 0.75 0.75 sc
CM
325 181 m
379 181 l
379 127 l
325 127 l
h
325 181 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1656 0 m
1710 0 l
1710 54 l
1656 54 l
h
1656 0 m
S
0 i
/Cs2 SC
1 1 0.75 sc
CM
217 181 m
271 181 l
271 127 l
217 127 l
h
217 181 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1548 0 m
1602 0 l
1602 54 l
1548 54 l
h
1548 0 m
S
0 i
/Cs2 SC
1 1 0.75 sc
CM
271 181 m
325 181 l
325 127 l
271 127 l
h
271 181 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1602 0 m
1656 0 l
1656 54 l
1602 54 l
h
1602 0 m
S
/Cs2 SC
0 0 0 sc
1483.136 -72 m
1521.0865 -8.4980564 l
S
0 i
CM
194.19057 182.63094 m
192.66174 191.03705 l
187.51141 187.95906 l
h
194.19057 182.63094 m
f
0 J
0 j
1 0 0 -1 -1331 181 cm
1525.1906 -1.6309402 m
1523.6617 -10.037052 l
1518.5114 -6.9590611 l
h
1525.1906 -1.6309402 m
S
1 J
1 j
0.60000002 i
1531.8524 -72 m
1569.911 -8.4919033 l
S
0 i
CM
243.02333 182.62976 m
241.48434 191.03401 l
236.33772 187.9498 l
h
243.02333 182.62976 m
f
0 J
0 j
1 0 0 -1 -1331 181 cm
1574.0233 -1.6297593 m
1572.4844 -10.034015 l
1567.3378 -6.9497929 l
h
1574.0233 -1.6297593 m
S
1 J
1 j
0.60000002 i
1566.8281 -72 m
1622.5298 -7.4930592 l
S
0 i
CM
296.75824 182.43806 m
293.80038 190.45374 l
289.25912 186.53238 l
h
296.75824 182.43806 m
f
0 J
0 j
1 0 0 -1 -1331 181 cm
1627.7582 -1.4380618 m
1624.8004 -9.4537392 l
1620.2592 -5.5323787 l
h
1627.7582 -1.4380618 m
S
0.75 1 0.75 sc
CM
109 181 m
163 181 l
163 127 l
109 127 l
h
109 181 m
f
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1440 0 m
1494 0 l
1494 54 l
1440 54 l
h
1440 0 m
S
/Cs3 SC
0 sc
0 i
1455.736 32.776001 m
(!")[ 12.160000 0.000000 ] xS
1337 -142 m
(#$%&$'\(\)*+,\)-.$/0'1\)\(2\(%$3)[ 9.488000 5.040000 9.184000 9.184000 5.328000 8.592000 13.648000 4.448000 9.184000 3.264000 8.000000 4.448000 8.000000 3.552000 5.328000 5.040000 8.896000 8.592000 3.552000 4.448000 13.648000 8.592000 13.648000 9.184000 5.328000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1332 126 m
1386 126 l
1386 180 l
1332 180 l
h
1332 126 m
S
1386 126 m
1440 126 l
1440 180 l
1386 180 l
h
1386 126 m
S
1818 126 m
1872 126 l
1872 180 l
1818 180 l
h
1818 126 m
S
1440 126 m
1494 126 l
1494 180 l
1440 180 l
h
1440 126 m
S
0 i
/Cs2 SC
1 0.75 0.75 sc
CM
163 55 m
217 55 l
217 1 l
163 1 l
h
163 55 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1494 126 m
1548 126 l
1548 180 l
1494 180 l
h
1494 126 m
S
1602 126 m
1656 126 l
1656 180 l
1602 180 l
h
1602 126 m
S
1656 126 m
1710 126 l
1710 180 l
1656 180 l
h
1656 126 m
S
1710 126 m
1764 126 l
1764 180 l
1710 180 l
h
1710 126 m
S
1764 126 m
1818 126 l
1818 180 l
1764 180 l
h
1764 126 m
S
0 i
/Cs2 SC
1 0.75 0.75 sc
CM
217 55 m
271 55 l
271 1 l
217 1 l
h
217 55 m
f
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -1331 181 cm
1548 126 m
1602 126 l
1602 180 l
1548 180 l
h
1548 126 m
S
1872 126 m
1926 126 l
1926 180 l
1872 180 l
h
1872 126 m
S
1926 126 m
1980 126 l
1980 180 l
1926 180 l
h
1926 126 m
S
1980 126 m
2034 126 l
2034 180 l
1980 180 l
h
1980 126 m
S
2034 126 m
2088 126 l
2088 180 l
2034 180 l
h
2034 126 m
S
2088 126 m
2142 126 l
2142 180 l
2088 180 l
h
2088 126 m
S
2142 126 m
2196 126 l
2196 180 l
2142 180 l
h
2142 126 m
S
/Cs3 SC
0 sc
0 i
1336.1119 110 m
(#$%&$'\(\)4+,\)-.$/0'1\)\(2\(%$3)[ 9.488000 5.040000 9.184000 9.184000 5.328000 8.592000 13.648000 4.448000 10.960000 3.264000 8.000000 4.448000 8.000000 3.552000 5.328000 5.040000 8.896000 8.592000 3.552000 4.448000 13.648000 8.592000 13.648000 9.184000 5.328000 0.000000 ] xS
1338.936 -16 m
(#53,.6'1\)\(2\(%$3\))[ 9.488000 8.896000 8.000000 8.000000 3.552000 8.592000 8.592000 3.552000 4.448000 13.648000 8.592000 13.648000 9.184000 5.328000 8.000000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1532.0881 126 m
1674.0648 58.262962 l
S
0 i
CM
350.28516 126.18185 m
341.77304 125.44466 l
344.35663 120.02941 l
h
350.28516 126.18185 m
f
0 J
0 j
1 0 0 -1 -1331 181 cm
1681.2852 54.818146 m
1672.7731 55.555336 l
1675.3567 60.970589 l
h
1681.2852 54.818146 m
S
1 J
1 j
0.60000002 i
1588.5 126 m
1725.3715 58.384796 l
S
0 i
CM
401.54398 126.15847 m
393.04272 125.30491 l
395.7002 119.92551 l
h
401.54398 126.15847 m
f
0 J
0 j
1 0 0 -1 -1331 181 cm
1732.5439 54.841526 m
1724.0427 55.695095 l
1726.7002 61.074497 l
h
1732.5439 54.841526 m
S
ep
end
%%Trailer
%%EOF
