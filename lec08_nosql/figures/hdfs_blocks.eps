%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1043.000000 559.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G4015) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1043 559
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1043 559
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /n put
dup 34 /a put
dup 35 /m put
dup 36 /e put
dup 37 /space put
dup 38 /o put
dup 39 /d put
dup 40 /three put
dup 41 /R put
dup 42 /c put
dup 43 /k put
dup 44 /one put
dup 45 /two put
dup 46 /four put
dup 47 /period put
dup 48 /t put
dup 49 /x put
dup 50 /l put
dup 51 /i put
dup 52 /r put
dup 53 /parenleft put
dup 54 /comma put
dup 55 /parenright put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






04001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 25 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/comma 4 def
/period 5 def
/one 6 def
/two 7 def
/three 8 def
/four 9 def
/R 10 def
/a 11 def
/c 12 def
/d 13 def
/e 14 def
/i 15 def
/k 16 def
/l 17 def
/m 18 def
/n 19 def
/o 20 def
/r 21 def
/t 22 def
/x 23 def
/uni2B91 24 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C926774C520A180165F2668824383C2FD0BBD585551A6494A5974E80882DD1B37F900E01291F8967167EE9EF4AECD6AB20E5EFFE36D633B63B0C3FD71D6C0843FCE6DAA0C53D6751983E5852F2951ED2757B4892D7117736D476AB64DE012B55642046119D7C1BDE450CD1AE45508E9C3AED747C55330E8CBD07BA63E23A336B1BC281A391B95AD199734ED507E1DCED156B6BF85098860AD2F0C61448D0B510E8965D53119401802C4948C71C5B487850722D0D59C42C1B19C3BFD6F24D095CB3E49813F1253427AE405F89056BEC5D14017E6FF4956F9A13ACE9855A225C7FB97117BC951DB6C786E7B002593D3DF1B80FB2D178D6BD6D66EE3202E27D2C5D6D61FEA49FA8F5970A8A701711CA3B054162DEB023ED86EC389031CBC6F0936CC405BE99AE52D248AEB31FA08E484682D613BC5D686869D663D09AAD1F9D48ABF2557426D18D7BDD9E6C6A228D37A8550E285700CED36AA54D9EC372F175673BA137C5716E5A3E5DDDB74C0810A1507B86059ED47644829EAD46B88ADE9B44B3A75FB4E9BD6DE78586B2F1B0CCF83B36AB678583DA15A0B416B21003BBCD615196EF2410D11626A545275C428DAD5A59DFAB72A2F5488B65F10162434809465A9DE7AA1DDADB0EC6F03D917986F074788C83E8F2188653F95B71A2D2771BE20F7D033DE9CFC611098ECFBCB5A24664495E5253D9357DBCCC68212C88892082E62022466B3A05FA2A1391314B9F6DE36CBEA7C462A898DE56F26BB95A9A563FA26D5


8D2428834DF11D3BE16DDC2F07CB8EDE521A8A3630A112F42470081B5A648C7BD9F7D7E333525513F04D92428653CFCBB76665495F710DE932E02E8095AABE41E561D2BF3A488FAAC7AC664A85CECA0DAE4C064C5377FC2B0AFFDB833069455FEF30361F0EC127A843ED9FD988116B8727ACB53235805DED5ED0279981CBC0BC551C46DAD8F23683A15EAA44FCA2EA39DEFDF64B13D4AE2576FE6A9964069C4E2D74461E7A48BBDCC50C68453F1E5C54B6A4C592D8629047C56107B3C5D70DBE9F42374163BF9B17686B80F93850119B462D50641FD6CB7B29BBBE799BFCECB5E1D729A783B0E666820DF5AF2184C873FDB47F15015041E2CB8E090D8D8161F1B31A07B84652E84A9B777D052C5215A5115C8AF35E9171B8F3DC2AE28EE01360F7E38D0F56CB82287EC3B0447C2D4DA3E6FE1FD9007DA2861381124BC6AA00A86A43073E629A0C31464C8FA61F868031DBCFAE6BAF1BFCB99CCF02A6C74B0FE8DA6168915D29841C73B73B0A7DBFB3FD67E0F715D494D76C3ADC68693DE18F303845562ECCC1D603D7E95E8E109EFDFC7AA7BD919DE116A143575296A9EFF9418E5440A42A45622595CFEB79364786D6E6B58EA657E0B2A150C80287AE7C13C6765FE5306A63DBCB1FD4D5FB9227A26332E80DA81359F4D9FB9C62F76F85B0ED28C0954FE48FA47F56B0B6C72647BD8C825E4F136CCBFB56473ABB51C184625E4C3A3A4A88FBF442C3262B3E0F570C759F644DE147647F635C56BAB227AB18C06FFC4DE140ECD551968FE25BE7CEBD8464DDD1672896D6F67778A3AAA561B034130E9F5D8435E024C3E467DA70024D3E78C4AF569480DEB7FB0E39665CFC2753ADDEB9DC534C33FA299E6498596BED4A64D0DE82B2400FCB2DC5AF6D17F0A39E8BEB0D1A971A87D50C24CC16360B3EE093ECEBFD86938AAF6B8A745BDA1202BE2EAC3F2597633A9673B746C343AEE377432F721337C2AD5565C2CBC3CD0A5E369A0AE3D82268C831F95A57216E0A2048E6F2739CD801FD46A7E07D3468CFBBCA2BA64217A5B5CBCD821526F582B05CFA234CCB870672E3FA405AE375EA0DCDFAD960547D589C579ACAB313CE2EC5BAC03DE883BE205D57E10C2660029636D1555E63932D98CB3A18E3798433E6EF1F655899DC969B4CE663D2BA37C3F68641CC1C9043D585BDC82F8B9F4BBCED3274E638480E389E5BF449C933AB8C09D484CC7CCE3C89BFC3BF091401CE321C869263ECE60AC0B4FB943FB2266468551841CFF5C449D3E9FBDA59303EBD9A1FA6A1C057BA0B907C16D8B2391A73DB64966A5B1AED48FE08E4F90AF2DCA86F6C38585A3608E648634B1FF3825BDF17843A1558CD93D8C0639227468FFE62739BCB6A94044513ECE2F4BF11934EDA0026321E963B6422659B1267C13F36AD7222CA1C1E5B3C22E1128EA1C5D7A55FA9F0935D13
4A560F4B9F41EB00A5288290E371EF5DE17E7CEB784C97D901EB16C7108AF3663633EC30529E04487F2859FA77BCDDFFAD0598644FA860664FE691F03D3B5576C4CE5CF36AAE7CEC0BD34994A2C01DB5C7984A6A88A6C26772A40566ECEA6AA3CCD2A4AB983473D720F6894FA04C83FBEC50739B3A63996683F969C193D2FCB5F83403B0A5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 1043 559 rc
0 559 m
1043 559 l
1043 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1380 1692 m
2760 1692 l
2760 -1707 l
-1380 -1707 l
h
-1380 1692 m
f
3 w
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
500 420 m
700 420 l
700 520 l
500 520 l
h
500 420 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 521 429 cm
/F1.1[ 28 0 0 -28 0 0]sf
-70.293999 10.108002 m
(!"#$%!&'$%)[ 15.568000 15.036000 23.884000 15.036000 7.784000 15.568000 16.072000 16.604000 15.036000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
100 600 m
200 600 l
200 700 l
100 700 l
h
100 600 m
S
220 600 m
320 600 l
320 700 l
220 700 l
h
220 600 m
S
100 720 m
200 720 l
200 820 l
100 820 l
h
100 720 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 71 129 cm
-7.7839999 10.108002 m
(\()s
0.60000002 i
/Cs2 SC
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
220 720 m
320 720 l
320 820 l
220 820 l
h
220 720 m
S
400 600 m
500 600 l
500 700 l
400 700 l
h
400 600 m
S
520 600 m
620 600 l
620 700 l
520 700 l
h
520 600 m
S
400 720 m
500 720 l
500 820 l
400 820 l
h
400 720 m
S
520 720 m
620 720 l
620 820 l
520 820 l
h
520 720 m
S
900 600 m
1000 600 l
1000 700 l
900 700 l
h
900 600 m
S
1020 600 m
1120 600 l
1120 700 l
1020 700 l
h
1020 600 m
S
900 720 m
1000 720 l
1000 820 l
900 820 l
h
900 720 m
S
1020 720 m
1120 720 l
1120 820 l
1020 820 l
h
1020 720 m
S
0 0 0 sc
100 840 m
100 840 l
100 844.97058 104.02943 849 109 849 c
192.63603 849 l
196.71082 849 200.6187 850.61871 203.5 853.5 c
203.5 853.5 l
205.98528 855.98529 210.01472 855.98529 212.5 853.5 c
212.5 853.5 l
215.3813 850.61871 219.28918 849 223.36397 849 c
307 849 l
311.97055 849 316 844.97058 316 840 c
316 840 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 131 22.13604 cm
/F1.1[ 27 0 0 -27 0 0]sf
-42.012001 9.6220016 m
(\)"*+%)[ 18.495000 14.499000 14.499000 14.013000 0.000000 ] xS
/Cs3 SC
1 0 0 sc
27 9.6220016 m
(,)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -79 899 cm
400 840 m
400 840 l
400 844.97058 404.02945 849 409 849 c
492.63605 849 l
496.71082 849 500.61871 850.61871 503.5 853.5 c
503.5 853.5 l
505.98529 855.98529 510.01471 855.98529 512.5 853.5 c
512.5 853.5 l
515.38129 850.61871 519.28918 849 523.36395 849 c
607 849 l
611.97058 849 616 844.97058 616 840 c
616 840 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 431 22.13604 cm
-42.012001 9.6220016 m
(\)"*+%)[ 18.495000 14.499000 14.499000 14.013000 0.000000 ] xS
/Cs3 SC
1 0 0 sc
27 9.6220016 m
(-)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -79 899 cm
900 840 m
900 840 l
900 844.97058 904.02942 849 909 849 c
992.63605 849 l
996.71082 849 1000.6187 850.61871 1003.5 853.5 c
1003.5 853.5 l
1005.9853 855.98529 1010.0147 855.98529 1012.5 853.5 c
1012.5 853.5 l
1015.3813 850.61871 1019.2892 849 1023.364 849 c
1107 849 l
1111.9706 849 1116 844.97058 1116 840 c
1116 840 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 931 22.13604 cm
-42.012001 9.6220016 m
(\)"*+%)[ 18.495000 14.499000 14.499000 14.013000 0.000000 ] xS
/Cs3 SC
1 0 0 sc
27 9.6220016 m
(!)s
/Cs2 SC
1 1 0.75 sc
CM
701 419 m
741 419 l
741 379 l
701 379 l
h
701 419 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
780 480 m
820 480 l
820 520 l
780 520 l
h
780 480 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 721 399 cm
/F1.1[ 28 0 0 -28 0 0]sf
-7.7839999 10.108002 m
(,)s
/Cs2 SC
1 0.75 0.75 sc
CM
741 419 m
781 419 l
781 379 l
741 379 l
h
741 419 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
820 480 m
860 480 l
860 520 l
820 520 l
h
820 480 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 761 399 cm
-7.7839999 10.108002 m
(-)s
/Cs2 SC
0.75 1 1 sc
CM
781 419 m
821 419 l
821 379 l
781 379 l
h
781 419 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
860 480 m
900 480 l
900 520 l
860 520 l
h
860 480 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 801 399 cm
-7.7839999 10.108002 m
(\()s
/Cs2 SC
1 0.75 1 sc
CM
821 419 m
861 419 l
861 379 l
821 379 l
h
821 419 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
900 480 m
940 480 l
940 520 l
900 520 l
h
900 480 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 841 399 cm
-7.7839999 10.108002 m
(.)s
/Cs2 SC
1 1 0.75 sc
CM
41 279 m
81 279 l
81 239 l
41 239 l
h
41 279 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
120 620 m
160 620 l
160 660 l
120 660 l
h
120 620 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 61 259 cm
-7.7839999 10.108002 m
(,)s
/Cs2 SC
1 1 0.75 sc
CM
341 159 m
381 159 l
381 119 l
341 119 l
h
341 159 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
420 740 m
460 740 l
460 780 l
420 780 l
h
420 740 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 361 139 cm
-7.7839999 10.108002 m
(,)s
/Cs2 SC
1 1 0.75 sc
CM
961 279 m
1001 279 l
1001 239 l
961 239 l
h
961 279 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
1040 620 m
1080 620 l
1080 660 l
1040 660 l
h
1040 620 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 981 259 cm
-7.7839999 10.108002 m
(,)s
/Cs2 SC
1 0.75 0.75 sc
CM
981 119 m
1021 119 l
1021 79 l
981 79 l
h
981 119 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
1060 780 m
1100 780 l
1100 820 l
1060 820 l
h
1060 780 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 1001 99 cm
-7.7839999 10.108002 m
(-)s
/Cs2 SC
1 0.75 0.75 sc
CM
341 279 m
381 279 l
381 239 l
341 239 l
h
341 279 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
420 620 m
460 620 l
460 660 l
420 660 l
h
420 620 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 361 259 cm
-7.7839999 10.108002 m
(-)s
/Cs2 SC
1 0.75 0.75 sc
CM
181 279 m
221 279 l
221 239 l
181 239 l
h
181 279 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
260 620 m
300 620 l
300 660 l
260 660 l
h
260 620 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 201 259 cm
-7.7839999 10.108002 m
(-)s
/Cs2 SC
0.75 1 1 sc
CM
41 139 m
81 139 l
81 99 l
41 99 l
h
41 139 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
120 760 m
160 760 l
160 800 l
120 800 l
h
120 760 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 61 119 cm
-7.7839999 10.108002 m
(\()s
/Cs2 SC
0.75 1 1 sc
CM
381 119 m
421 119 l
421 79 l
381 79 l
h
381 119 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
460 780 m
500 780 l
500 820 l
460 820 l
h
460 780 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 401 99 cm
-7.7839999 10.108002 m
(\()s
/Cs2 SC
0.75 1 1 sc
CM
841 279 m
881 279 l
881 239 l
841 239 l
h
841 279 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
920 620 m
960 620 l
960 660 l
920 660 l
h
920 620 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 861 259 cm
-7.7839999 10.108002 m
(\()s
/Cs2 SC
1 0.75 1 sc
CM
161 139 m
201 139 l
201 99 l
161 99 l
h
161 139 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
240 760 m
280 760 l
280 800 l
240 800 l
h
240 760 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 181 119 cm
-7.7839999 10.108002 m
(.)s
/Cs2 SC
1 0.75 1 sc
CM
481 259 m
521 259 l
521 219 l
481 219 l
h
481 259 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
560 640 m
600 640 l
600 680 l
560 680 l
h
560 640 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 501 239 cm
-7.7839999 10.108002 m
(.)s
/Cs2 SC
1 0.75 1 sc
CM
941 159 m
981 159 l
981 119 l
941 119 l
h
941 159 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
1020 740 m
1060 740 l
1060 780 l
1020 780 l
h
1020 740 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 961 139 cm
-7.7839999 10.108002 m
(.)s
/Cs3 SC
0.40000001 0.2 1 sc
1 0 0 -1 728.5 457.5 cm
/F1.1[ 27 0 0 -27 0 0]sf
-26.5005 9.6220016 m
("/010)[ 14.499000 7.506000 8.505000 13.986000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
120.49742 467.28424 m
147.83424 451.66327 147.83424 426.33673 120.49742 410.71576 c
93.160744 395.09473 48.83926 395.09473 21.502581 410.71576 c
-5.83424 426.33673 -5.83424 451.66327 21.502581 467.28424 c
48.83926 482.90527 93.160744 482.90527 120.49742 467.28424 c
f
1 w
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -79 899 cm
199.49742 431.71576 m
226.83424 447.33673 226.83424 472.66327 199.49742 488.28424 c
172.16074 503.90527 127.83926 503.90527 100.50258 488.28424 c
73.165756 472.66327 73.165756 447.33673 100.50258 431.71576 c
127.83926 416.09473 172.16074 416.09473 199.49742 431.71576 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 71 439 cm
/F1.1[ 25 0 0 -25 0 0]sf
-29.862499 9.1500015 m
(*23$!0)[ 13.425000 5.550000 5.550000 13.425000 13.900000 0.000000 ] xS
2 w
0.60000002 i
/Cs2 SC
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -79 899 cm
212.62688 442.1066 m
356.11386 401.11032 l
358.65277 400.38492 361.34509 400.3923 363.87997 401.13165 c
486.116 436.78384 l
S
0 i
CM
416.332 459.52817 m
408.12399 465.67218 l
406.108 458.76016 l
h
416.332 459.52817 m
f
0 J
0 j
1 0 0 -1 -79 899 cm
495.332 439.47183 m
487.12399 433.32782 l
485.108 440.23984 l
h
495.332 439.47183 m
S
1 J
1 j
0.60000002 i
498.5 491.14584 m
363.38086 519.29565 l
361.16025 519.7583 358.86044 519.67444 356.67941 519.05127 c
225.03053 481.43729 l
S
0 i
CM
136.79991 420.20001 m
145.04153 414.10123 l
147.01953 421.0242 l
h
136.79991 420.20001 m
f
0 J
0 j
1 0 0 -1 -79 899 cm
215.79991 478.79999 m
224.04153 484.89877 l
226.01953 477.9758 l
h
215.79991 478.79999 m
S
/Cs1 SC
0 sc
1 0 0 -1 268.5 537.5 cm
/F1.1[ 27 0 0 -27 0 0]sf
-75.262497 9.6220016 m
(4$"'5)[ 8.505000 14.499000 14.499000 16.011000 0.000000 ] xS
/Cs3 SC
0.40000001 0.2 1 sc
-14.7555 9.6220016 m
("/010)[ 14.499000 7.506000 8.505000 13.986000 0.000000 ] xS
/Cs1 SC
0 sc
38.245499 9.6220016 m
(6%-7)[ 7.506000 7.506000 15.012000 0.000000 ] xS
1 0 0 -1 264.5 360.5 cm
-78.300003 9.6220016 m
(5)s
/Cs3 SC
1 0 0 sc
-71.306999 9.6220016 m
(,)s
/Cs1 SC
0 sc
-56.294998 9.6220016 m
(/)s
/Cs3 SC
0.2 0 1 sc
-48.789001 9.6220016 m
(-)s
/Cs1 SC
0 sc
-33.777 9.6220016 m
(6%)[ 7.506000 0.000000 ] xS
/Cs3 SC
1 0 0 sc
-18.764999 9.6220016 m
(-)s
/Cs1 SC
0 sc
-3.753 9.6220016 m
(/)s
/Cs3 SC
0.2 0 1 sc
3.753 9.6220016 m
(,)s
/Cs1 SC
0 sc
18.764999 9.6220016 m
(6%)[ 7.506000 0.000000 ] xS
/Cs3 SC
1 0 0 sc
33.777 9.6220016 m
(!)s
/Cs1 SC
0 sc
48.789001 9.6220016 m
(/)s
/Cs3 SC
0.2 0 1 sc
56.294998 9.6220016 m
(.)s
/Cs1 SC
0 sc
71.306999 9.6220016 m
(7)s
/Cs3 SC
0.2 0 1 sc
1 0 0 -1 1014 157.5 cm
-7.506 9.6220016 m
(.)s
1 0 0 -1 411 277.5 cm
-7.506 9.6220016 m
(,)s
1 0 0 -1 154 277.5 cm
-7.506 9.6220016 m
(-)s
ep
end
%%Trailer
%%EOF
